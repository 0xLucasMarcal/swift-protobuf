/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: pluginlib_descriptor_test.proto
 *
 */

// Protos/pluginlib_descriptor_test.proto - test proto
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
// -----------------------------------------------------------------------------
///
/// Test proto for Tests/PluginLibraryTests/Test_Descriptor.swift
///
// -----------------------------------------------------------------------------

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

enum SwiftDescriptorTest_TopLevelEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case valueZero // = 0
  case valueOne // = 1
  case valueTwo // = 2

  init() {
    self = .valueZero
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .valueZero
    case 1: self = .valueOne
    case 2: self = .valueTwo
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .valueZero: return 0
    case .valueOne: return 1
    case .valueTwo: return 2
    }
  }

}

struct SwiftDescriptorTest_TopLevelMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TopLevelMessage"

  var field1: String {
    get {return _storage._field1 ?? String()}
    set {_uniqueStorage()._field1 = newValue}
  }
  /// Returns true if `field1` has been explicitly set.
  var hasField1: Bool {return _storage._field1 != nil}
  /// Clears the value of `field1`. Subsequent reads from it will return its default value.
  mutating func clearField1() {_storage._field1 = nil}

  var field2: Int32 {
    get {return _storage._field2 ?? 0}
    set {_uniqueStorage()._field2 = newValue}
  }
  /// Returns true if `field2` has been explicitly set.
  var hasField2: Bool {return _storage._field2 != nil}
  /// Clears the value of `field2`. Subsequent reads from it will return its default value.
  mutating func clearField2() {_storage._field2 = nil}

  var o: OneOf_O? {
    get {return _storage._o}
    set {_uniqueStorage()._o = newValue}
  }

  var field3: SwiftDescriptorTest_TopLevelEnum {
    get {
      if case .field3(let v)? = _storage._o {return v}
      return SwiftDescriptorTest_TopLevelEnum.valueZero
    }
    set {_uniqueStorage()._o = .field3(newValue)}
  }

  var field4: SwiftDescriptorTest_TopLevelMessage.SubEnum {
    get {
      if case .field4(let v)? = _storage._o {return v}
      return SwiftDescriptorTest_TopLevelMessage.SubEnum.subValue0
    }
    set {_uniqueStorage()._o = .field4(newValue)}
  }

  var field5: SwiftDescriptorTest_TopLevelMessage.SubMessage {
    get {
      if case .field5(let v)? = _storage._o {return v}
      return SwiftDescriptorTest_TopLevelMessage.SubMessage()
    }
    set {_uniqueStorage()._o = .field5(newValue)}
  }

  var field6: SwiftDescriptorTest_TopLevelMessage2 {
    get {
      if case .field6(let v)? = _storage._o {return v}
      return SwiftDescriptorTest_TopLevelMessage2()
    }
    set {_uniqueStorage()._o = .field6(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_O: Equatable {
    case field3(SwiftDescriptorTest_TopLevelEnum)
    case field4(SwiftDescriptorTest_TopLevelMessage.SubEnum)
    case field5(SwiftDescriptorTest_TopLevelMessage.SubMessage)
    case field6(SwiftDescriptorTest_TopLevelMessage2)

    static func ==(lhs: SwiftDescriptorTest_TopLevelMessage.OneOf_O, rhs: SwiftDescriptorTest_TopLevelMessage.OneOf_O) -> Bool {
      switch (lhs, rhs) {
      case (.field3(let l), .field3(let r)): return l == r
      case (.field4(let l), .field4(let r)): return l == r
      case (.field5(let l), .field5(let r)): return l == r
      case (.field6(let l), .field6(let r)): return l == r
      default: return false
      }
    }
  }

  enum SubEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case subValue0 // = 0
    case subValue1 // = 1
    case subValue2 // = 2

    init() {
      self = .subValue0
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .subValue0
      case 1: self = .subValue1
      case 2: self = .subValue2
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .subValue0: return 0
      case .subValue1: return 1
      case .subValue2: return 2
      }
    }

  }

  struct SubMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftDescriptorTest_TopLevelMessage.protoMessageName + ".SubMessage"

    var field1: Int32 {
      get {return _storage._field1 ?? 0}
      set {_uniqueStorage()._field1 = newValue}
    }
    /// Returns true if `field1` has been explicitly set.
    var hasField1: Bool {return _storage._field1 != nil}
    /// Clears the value of `field1`. Subsequent reads from it will return its default value.
    mutating func clearField1() {_storage._field1 = nil}

    var field2: String {
      get {return _storage._field2 ?? String()}
      set {_uniqueStorage()._field2 = newValue}
    }
    /// Returns true if `field2` has been explicitly set.
    var hasField2: Bool {return _storage._field2 != nil}
    /// Clears the value of `field2`. Subsequent reads from it will return its default value.
    mutating func clearField2() {_storage._field2 = nil}

    var field3: SwiftDescriptorTest_TopLevelMessage.SubMessage {
      get {return _storage._field3 ?? SwiftDescriptorTest_TopLevelMessage.SubMessage()}
      set {_uniqueStorage()._field3 = newValue}
    }
    /// Returns true if `field3` has been explicitly set.
    var hasField3: Bool {return _storage._field3 != nil}
    /// Clears the value of `field3`. Subsequent reads from it will return its default value.
    mutating func clearField3() {_storage._field3 = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularInt32Field(value: &_storage._field1)
          case 2: try decoder.decodeSingularStringField(value: &_storage._field2)
          case 3: try decoder.decodeSingularMessageField(value: &_storage._field3)
          default: break
          }
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._field1 {
          try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
        }
        if let v = _storage._field2 {
          try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        }
        if let v = _storage._field3 {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass()
  }

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._field1)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._field2)
        case 3...6:
          if _storage._o != nil {
            try decoder.handleConflictingOneOf()
          }
          _storage._o = try SwiftDescriptorTest_TopLevelMessage.OneOf_O(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._field1 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._field2 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      try _storage._o?.traverse(visitor: &visitor)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct SwiftDescriptorTest_TopLevelMessage2: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TopLevelMessage2"

  var left: SwiftDescriptorTest_TopLevelMessage {
    get {return _storage._left ?? SwiftDescriptorTest_TopLevelMessage()}
    set {_uniqueStorage()._left = newValue}
  }
  /// Returns true if `left` has been explicitly set.
  var hasLeft: Bool {return _storage._left != nil}
  /// Clears the value of `left`. Subsequent reads from it will return its default value.
  mutating func clearLeft() {_storage._left = nil}

  var right: SwiftDescriptorTest_TopLevelMessage2 {
    get {return _storage._right ?? SwiftDescriptorTest_TopLevelMessage2()}
    set {_uniqueStorage()._right = newValue}
  }
  /// Returns true if `right` has been explicitly set.
  var hasRight: Bool {return _storage._right != nil}
  /// Clears the value of `right`. Subsequent reads from it will return its default value.
  mutating func clearRight() {_storage._right = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._left)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._right)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._left {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._right {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct SwiftDescriptorTest_ExternalRefs: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ExternalRefs"

  var desc: Google_Protobuf_DescriptorProto {
    get {return _storage._desc ?? Google_Protobuf_DescriptorProto()}
    set {_uniqueStorage()._desc = newValue}
  }
  /// Returns true if `desc` has been explicitly set.
  var hasDesc: Bool {return _storage._desc != nil}
  /// Clears the value of `desc`. Subsequent reads from it will return its default value.
  mutating func clearDesc() {_storage._desc = nil}

  var ver: Google_Protobuf_Compiler_Version {
    get {return _storage._ver ?? Google_Protobuf_Compiler_Version()}
    set {_uniqueStorage()._ver = newValue}
  }
  /// Returns true if `ver` has been explicitly set.
  var hasVer: Bool {return _storage._ver != nil}
  /// Clears the value of `ver`. Subsequent reads from it will return its default value.
  mutating func clearVer() {_storage._ver = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._desc, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._desc)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._ver)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._desc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._ver {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct SwiftDescriptorTest_ScoperForExt: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ScoperForExt"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Extension support defined in pluginlib_descriptor_test.proto.

extension Google_Protobuf_FieldOptions {
  var SwiftDescriptorTest_extStr: String {
    get {return getExtensionValue(ext: SwiftDescriptorTest_Extensions_ext_str) ?? String()}
    set {setExtensionValue(ext: SwiftDescriptorTest_Extensions_ext_str, value: newValue)}
  }
  var hasSwiftDescriptorTest_extStr: Bool {
    return hasExtensionValue(ext: SwiftDescriptorTest_Extensions_ext_str)
  }
  mutating func clearSwiftDescriptorTest_extStr() {
    clearExtensionValue(ext: SwiftDescriptorTest_Extensions_ext_str)
  }
}

extension Google_Protobuf_MessageOptions {
  var SwiftDescriptorTest_ScoperForExt_extEnum: SwiftDescriptorTest_TopLevelEnum {
    get {return getExtensionValue(ext: SwiftDescriptorTest_ScoperForExt.Extensions.ext_enum) ?? SwiftDescriptorTest_TopLevelEnum.valueZero}
    set {setExtensionValue(ext: SwiftDescriptorTest_ScoperForExt.Extensions.ext_enum, value: newValue)}
  }
  var hasSwiftDescriptorTest_ScoperForExt_extEnum: Bool {
    return hasExtensionValue(ext: SwiftDescriptorTest_ScoperForExt.Extensions.ext_enum)
  }
  mutating func clearSwiftDescriptorTest_ScoperForExt_extEnum() {
    clearExtensionValue(ext: SwiftDescriptorTest_ScoperForExt.Extensions.ext_enum)
  }
}

extension Google_Protobuf_MessageOptions {
  var SwiftDescriptorTest_ScoperForExt_extMsg: SwiftDescriptorTest_TopLevelMessage2 {
    get {return getExtensionValue(ext: SwiftDescriptorTest_ScoperForExt.Extensions.ext_msg) ?? SwiftDescriptorTest_TopLevelMessage2()}
    set {setExtensionValue(ext: SwiftDescriptorTest_ScoperForExt.Extensions.ext_msg, value: newValue)}
  }
  var hasSwiftDescriptorTest_ScoperForExt_extMsg: Bool {
    return hasExtensionValue(ext: SwiftDescriptorTest_ScoperForExt.Extensions.ext_msg)
  }
  mutating func clearSwiftDescriptorTest_ScoperForExt_extMsg() {
    clearExtensionValue(ext: SwiftDescriptorTest_ScoperForExt.Extensions.ext_msg)
  }
}

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let SwiftDescriptorTest_PluginlibDescriptorTest_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  SwiftDescriptorTest_Extensions_ext_str,
  SwiftDescriptorTest_ScoperForExt.Extensions.ext_enum,
  SwiftDescriptorTest_ScoperForExt.Extensions.ext_msg
]

let SwiftDescriptorTest_Extensions_ext_str = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 90000,
  fieldName: "swift_descriptor_test.ext_str",
  defaultValue: String()
)

extension SwiftDescriptorTest_ScoperForExt {
  enum Extensions {
    static let ext_enum = SwiftProtobuf.MessageExtension<OptionalEnumExtensionField<SwiftDescriptorTest_TopLevelEnum>, Google_Protobuf_MessageOptions>(
      _protobuf_fieldNumber: 99001,
      fieldName: "swift_descriptor_test.ScoperForExt.ext_enum",
      defaultValue: SwiftDescriptorTest_TopLevelEnum.valueZero
    )

    static let ext_msg = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<SwiftDescriptorTest_TopLevelMessage2>, Google_Protobuf_MessageOptions>(
      _protobuf_fieldNumber: 99002,
      fieldName: "swift_descriptor_test.ScoperForExt.ext_msg",
      defaultValue: SwiftDescriptorTest_TopLevelMessage2()
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "swift_descriptor_test"

extension SwiftDescriptorTest_TopLevelEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VALUE_ZERO"),
    1: .same(proto: "VALUE_ONE"),
    2: .same(proto: "VALUE_TWO"),
  ]
}

extension SwiftDescriptorTest_TopLevelMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field1"),
    2: .same(proto: "field2"),
    3: .same(proto: "field3"),
    4: .same(proto: "field4"),
    5: .same(proto: "field5"),
    6: .same(proto: "field6"),
  ]

  fileprivate class _StorageClass {
    var _field1: String? = nil
    var _field2: Int32? = nil
    var _o: SwiftDescriptorTest_TopLevelMessage.OneOf_O?

    init() {}

    init(copying source: _StorageClass) {
      _field1 = source._field1
      _field2 = source._field2
      _o = source._o
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: SwiftDescriptorTest_TopLevelMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._field1 != other_storage._field1 {return false}
        if _storage._field2 != other_storage._field2 {return false}
        if _storage._o != other_storage._o {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftDescriptorTest_TopLevelMessage.OneOf_O {
  fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
    switch fieldNumber {
    case 3:
      var value: SwiftDescriptorTest_TopLevelEnum?
      try decoder.decodeSingularEnumField(value: &value)
      if let value = value {
        self = .field3(value)
        return
      }
    case 4:
      var value: SwiftDescriptorTest_TopLevelMessage.SubEnum?
      try decoder.decodeSingularEnumField(value: &value)
      if let value = value {
        self = .field4(value)
        return
      }
    case 5:
      var value: SwiftDescriptorTest_TopLevelMessage.SubMessage?
      try decoder.decodeSingularMessageField(value: &value)
      if let value = value {
        self = .field5(value)
        return
      }
    case 6:
      var value: SwiftDescriptorTest_TopLevelMessage2?
      try decoder.decodeSingularMessageField(value: &value)
      if let value = value {
        self = .field6(value)
        return
      }
    default:
      break
    }
    return nil
  }

  fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self {
    case .field3(let v):
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    case .field4(let v):
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    case .field5(let v):
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .field6(let v):
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
  }
}

extension SwiftDescriptorTest_TopLevelMessage.SubEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUB_VALUE_0"),
    1: .same(proto: "SUB_VALUE_1"),
    2: .same(proto: "SUB_VALUE_2"),
  ]
}

extension SwiftDescriptorTest_TopLevelMessage.SubMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field1"),
    2: .same(proto: "field2"),
    3: .same(proto: "field3"),
  ]

  fileprivate class _StorageClass {
    var _field1: Int32? = nil
    var _field2: String? = nil
    var _field3: SwiftDescriptorTest_TopLevelMessage.SubMessage? = nil

    init() {}

    init(copying source: _StorageClass) {
      _field1 = source._field1
      _field2 = source._field2
      _field3 = source._field3
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: SwiftDescriptorTest_TopLevelMessage.SubMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._field1 != other_storage._field1 {return false}
        if _storage._field2 != other_storage._field2 {return false}
        if _storage._field3 != other_storage._field3 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftDescriptorTest_TopLevelMessage2: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "left"),
    2: .same(proto: "right"),
  ]

  fileprivate class _StorageClass {
    var _left: SwiftDescriptorTest_TopLevelMessage? = nil
    var _right: SwiftDescriptorTest_TopLevelMessage2? = nil

    init() {}

    init(copying source: _StorageClass) {
      _left = source._left
      _right = source._right
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: SwiftDescriptorTest_TopLevelMessage2) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._left != other_storage._left {return false}
        if _storage._right != other_storage._right {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftDescriptorTest_ExternalRefs: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "desc"),
    2: .same(proto: "ver"),
  ]

  fileprivate class _StorageClass {
    var _desc: Google_Protobuf_DescriptorProto? = nil
    var _ver: Google_Protobuf_Compiler_Version? = nil

    init() {}

    init(copying source: _StorageClass) {
      _desc = source._desc
      _ver = source._ver
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: SwiftDescriptorTest_ExternalRefs) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._desc != other_storage._desc {return false}
        if _storage._ver != other_storage._ver {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftDescriptorTest_ScoperForExt: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: SwiftDescriptorTest_ScoperForExt) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: generated_swift_names_messages.proto
 *
 */

/// See Makefile for the logic that generates this
/// Protoc errors imply this file is being generated incorrectly
/// Swift compile errors are probably bugs in protoc-gen-swift

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct ProtobufUnittest_GeneratedSwiftReservedMessages: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GeneratedSwiftReservedMessages"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct a: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".a"

    var a: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &a)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if a != 0 {
        try visitor.visitSingularInt32Field(value: a, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct adjusted: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".adjusted"

    var adjusted: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &adjusted)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if adjusted != 0 {
        try visitor.visitSingularInt32Field(value: adjusted, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct any: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".any"

    var any: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &any)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if any != 0 {
        try visitor.visitSingularInt32Field(value: any, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct AnyExtensionField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".AnyExtensionField"

    var anyExtensionField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &anyExtensionField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if anyExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: anyExtensionField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct AnyMessageStorage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".AnyMessageStorage"

    var anyMessageStorage: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &anyMessageStorage)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if anyMessageStorage != 0 {
        try visitor.visitSingularInt32Field(value: anyMessageStorage, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Api: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Api"

    var api: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &api)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if api != 0 {
        try visitor.visitSingularInt32Field(value: api, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct appended: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".appended"

    var appended: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &appended)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if appended != 0 {
        try visitor.visitSingularInt32Field(value: appended, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct appendUIntHex: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".appendUIntHex"

    var appendUintHex: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &appendUintHex)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if appendUintHex != 0 {
        try visitor.visitSingularInt32Field(value: appendUintHex, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct appendUnknown: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".appendUnknown"

    var appendUnknown: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &appendUnknown)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if appendUnknown != 0 {
        try visitor.visitSingularInt32Field(value: appendUnknown, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct apple: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".apple"

    var apple: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &apple)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if apple != 0 {
        try visitor.visitSingularInt32Field(value: apple, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct are: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".are"

    var are: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &are)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if are != 0 {
        try visitor.visitSingularInt32Field(value: are, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct areAllInitialized: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".areAllInitialized"

    var areAllInitialized: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &areAllInitialized)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if areAllInitialized != 0 {
        try visitor.visitSingularInt32Field(value: areAllInitialized, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct arrayLiteral: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".arrayLiteral"

    var arrayLiteral: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &arrayLiteral)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if arrayLiteral != 0 {
        try visitor.visitSingularInt32Field(value: arrayLiteral, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct arraySeparator: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".arraySeparator"

    var arraySeparator: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &arraySeparator)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if arraySeparator != 0 {
        try visitor.visitSingularInt32Field(value: arraySeparator, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct asMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".as"

    var as_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &as_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if as_p != 0 {
        try visitor.visitSingularInt32Field(value: as_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct asciiOpenCurlyBracket: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".asciiOpenCurlyBracket"

    var asciiOpenCurlyBracket: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &asciiOpenCurlyBracket)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if asciiOpenCurlyBracket != 0 {
        try visitor.visitSingularInt32Field(value: asciiOpenCurlyBracket, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct asciiZero: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".asciiZero"

    var asciiZero: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &asciiZero)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if asciiZero != 0 {
        try visitor.visitSingularInt32Field(value: asciiZero, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct asJSONObject: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".asJSONObject"

    var asJsonobject: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &asJsonobject)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if asJsonobject != 0 {
        try visitor.visitSingularInt32Field(value: asJsonobject, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct available: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".available"

    var available: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &available)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if available != 0 {
        try visitor.visitSingularInt32Field(value: available, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct b: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".b"

    var b: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &b)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if b != 0 {
        try visitor.visitSingularInt32Field(value: b, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct base64String: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".base64String"

    var base64String: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &base64String)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if base64String != 0 {
        try visitor.visitSingularInt32Field(value: base64String, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct BaseType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".BaseType"

    var baseType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &baseType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if baseType != 0 {
        try visitor.visitSingularInt32Field(value: baseType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct because: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".because"

    var because: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &because)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if because != 0 {
        try visitor.visitSingularInt32Field(value: because, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct binary: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".binary"

    var binary: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &binary)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if binary != 0 {
        try visitor.visitSingularInt32Field(value: binary, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct BinaryDecoder: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryDecoder"

    var binaryDecoder: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &binaryDecoder)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if binaryDecoder != 0 {
        try visitor.visitSingularInt32Field(value: binaryDecoder, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct BinaryEncoder: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryEncoder"

    var binaryEncoder: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &binaryEncoder)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if binaryEncoder != 0 {
        try visitor.visitSingularInt32Field(value: binaryEncoder, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct BinaryEncodingSizeVisitor: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryEncodingSizeVisitor"

    var binaryEncodingSizeVisitor: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &binaryEncodingSizeVisitor)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if binaryEncodingSizeVisitor != 0 {
        try visitor.visitSingularInt32Field(value: binaryEncodingSizeVisitor, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct BinaryEncodingVisitor: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryEncodingVisitor"

    var binaryEncodingVisitor: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &binaryEncodingVisitor)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if binaryEncodingVisitor != 0 {
        try visitor.visitSingularInt32Field(value: binaryEncodingVisitor, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct bits: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".bits"

    var bits: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &bits)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if bits != 0 {
        try visitor.visitSingularInt32Field(value: bits, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct body: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".body"

    var body: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &body)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if body != 0 {
        try visitor.visitSingularInt32Field(value: body, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct bodySize: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".bodySize"

    var bodySize: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &bodySize)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if bodySize != 0 {
        try visitor.visitSingularInt32Field(value: bodySize, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct BoolMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Bool"

    var bool: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &bool)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if bool != 0 {
        try visitor.visitSingularInt32Field(value: bool, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct booleanLiteral: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".booleanLiteral"

    var booleanLiteral: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &booleanLiteral)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if booleanLiteral != 0 {
        try visitor.visitSingularInt32Field(value: booleanLiteral, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct BooleanLiteralType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".BooleanLiteralType"

    var booleanLiteralType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &booleanLiteralType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if booleanLiteralType != 0 {
        try visitor.visitSingularInt32Field(value: booleanLiteralType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct boolValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".boolValue"

    var boolValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &boolValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if boolValue != 0 {
        try visitor.visitSingularInt32Field(value: boolValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct buffer: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".buffer"

    var buffer: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &buffer)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if buffer != 0 {
        try visitor.visitSingularInt32Field(value: buffer, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct buildTypeURL: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".buildTypeURL"

    var buildTypeURL: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &buildTypeURL)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if buildTypeURL != 0 {
        try visitor.visitSingularInt32Field(value: buildTypeURL, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct by: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".by"

    var by: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &by)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if by != 0 {
        try visitor.visitSingularInt32Field(value: by, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct bytes: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".bytes"

    var bytes: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &bytes)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if bytes != 0 {
        try visitor.visitSingularInt32Field(value: bytes, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct BytesValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".BytesValue"

    var bytesValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &bytesValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if bytesValue != 0 {
        try visitor.visitSingularInt32Field(value: bytesValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct c: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".c"

    var c: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &c)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if c != 0 {
        try visitor.visitSingularInt32Field(value: c, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct capitalizeNext: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".capitalizeNext"

    var capitalizeNext: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &capitalizeNext)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if capitalizeNext != 0 {
        try visitor.visitSingularInt32Field(value: capitalizeNext, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct cardinality: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".cardinality"

    var cardinality: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &cardinality)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if cardinality != 0 {
        try visitor.visitSingularInt32Field(value: cardinality, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Character: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Character"

    var character: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &character)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if character != 0 {
        try visitor.visitSingularInt32Field(value: character, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct characters: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".characters"

    var characters: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &characters)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if characters != 0 {
        try visitor.visitSingularInt32Field(value: characters, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct chars: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".chars"

    var chars: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &chars)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if chars != 0 {
        try visitor.visitSingularInt32Field(value: chars, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct clearExtensionValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".clearExtensionValue"

    var clearExtensionValue_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &clearExtensionValue_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if clearExtensionValue_p != 0 {
        try visitor.visitSingularInt32Field(value: clearExtensionValue_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct clearSourceContext: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".clearSourceContext"

    var clearSourceContext_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &clearSourceContext_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if clearSourceContext_p != 0 {
        try visitor.visitSingularInt32Field(value: clearSourceContext_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct clearValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".clearValue"

    var clearValue_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &clearValue_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if clearValue_p != 0 {
        try visitor.visitSingularInt32Field(value: clearValue_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct com: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".com"

    var com: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &com)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if com != 0 {
        try visitor.visitSingularInt32Field(value: com, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct consume: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".consume"

    var consume: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &consume)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if consume != 0 {
        try visitor.visitSingularInt32Field(value: consume, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct contentJSON: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".contentJSON"

    var contentJson: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &contentJson)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if contentJson != 0 {
        try visitor.visitSingularInt32Field(value: contentJson, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct contentsOf: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".contentsOf"

    var contentsOf: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &contentsOf)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if contentsOf != 0 {
        try visitor.visitSingularInt32Field(value: contentsOf, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct count: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".count"

    var count: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &count)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if count != 0 {
        try visitor.visitSingularInt32Field(value: count, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct customCodable: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".customCodable"

    var customCodable: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &customCodable)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if customCodable != 0 {
        try visitor.visitSingularInt32Field(value: customCodable, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct d: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".d"

    var d: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &d)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if d != 0 {
        try visitor.visitSingularInt32Field(value: d, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct DataMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Data"

    var data: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &data)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if data != 0 {
        try visitor.visitSingularInt32Field(value: data, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct dataResult: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".dataResult"

    var dataResult: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &dataResult)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if dataResult != 0 {
        try visitor.visitSingularInt32Field(value: dataResult, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct dataSize: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".dataSize"

    var dataSize: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &dataSize)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if dataSize != 0 {
        try visitor.visitSingularInt32Field(value: dataSize, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct date: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".date"

    var date: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &date)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if date != 0 {
        try visitor.visitSingularInt32Field(value: date, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct daySec: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".daySec"

    var daySec: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &daySec)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if daySec != 0 {
        try visitor.visitSingularInt32Field(value: daySec, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct daysSinceEpoch: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".daysSinceEpoch"

    var daysSinceEpoch: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &daysSinceEpoch)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if daysSinceEpoch != 0 {
        try visitor.visitSingularInt32Field(value: daysSinceEpoch, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct DD: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".DD"

    var dd: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &dd)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if dd != 0 {
        try visitor.visitSingularInt32Field(value: dd, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct debugDescriptionMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".debugDescription"

    var debugDescription_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &debugDescription_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if debugDescription_p != 0 {
        try visitor.visitSingularInt32Field(value: debugDescription_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeBytes: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeBytes"

    var decodeBytes: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeBytes)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeBytes != 0 {
        try visitor.visitSingularInt32Field(value: decodeBytes, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decoded: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decoded"

    var decoded: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decoded)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decoded != 0 {
        try visitor.visitSingularInt32Field(value: decoded, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodedFromJSONNull: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodedFromJSONNull"

    var decodedFromJsonnull: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodedFromJsonnull)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodedFromJsonnull != 0 {
        try visitor.visitSingularInt32Field(value: decodedFromJsonnull, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeExtensionField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeExtensionField"

    var decodeExtensionField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeExtensionField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: decodeExtensionField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeJSON: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeJSON"

    var decodeJson: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeJson)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeJson != 0 {
        try visitor.visitSingularInt32Field(value: decodeJson, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeMapField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeMapField"

    var decodeMapField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeMapField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeMapField != 0 {
        try visitor.visitSingularInt32Field(value: decodeMapField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeMessageMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeMessage"

    var decodeMessage: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeMessage)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeMessage != 0 {
        try visitor.visitSingularInt32Field(value: decodeMessage, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decoder: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decoder"

    var decoder_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decoder_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decoder_p != 0 {
        try visitor.visitSingularInt32Field(value: decoder_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeated: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeated"

    var decodeRepeated: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeated)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeated != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeated, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedBoolField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedBoolField"

    var decodeRepeatedBoolField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedBoolField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedBoolField != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedBoolField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedBytesField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedBytesField"

    var decodeRepeatedBytesField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedBytesField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedBytesField != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedBytesField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedDoubleField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedDoubleField"

    var decodeRepeatedDoubleField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedDoubleField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedDoubleField != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedDoubleField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedEnumField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedEnumField"

    var decodeRepeatedEnumField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedEnumField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedEnumField != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedEnumField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedFixed32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedFixed32Field"

    var decodeRepeatedFixed32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedFixed32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedFixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedFixed32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedFixed64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedFixed64Field"

    var decodeRepeatedFixed64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedFixed64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedFixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedFixed64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedFloatField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedFloatField"

    var decodeRepeatedFloatField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedFloatField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedFloatField != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedFloatField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedGroupField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedGroupField"

    var decodeRepeatedGroupField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedGroupField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedGroupField != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedGroupField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedInt32Field"

    var decodeRepeatedInt32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedInt32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedInt32Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedInt32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedInt64Field"

    var decodeRepeatedInt64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedInt64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedInt64Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedInt64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedMessageField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedMessageField"

    var decodeRepeatedMessageField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedMessageField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedMessageField != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedMessageField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedSFixed32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedSFixed32Field"

    var decodeRepeatedSfixed32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedSfixed32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedSfixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedSfixed32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedSFixed64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedSFixed64Field"

    var decodeRepeatedSfixed64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedSfixed64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedSfixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedSfixed64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedSInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedSInt32Field"

    var decodeRepeatedSint32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedSint32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedSint32Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedSint32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedSInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedSInt64Field"

    var decodeRepeatedSint64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedSint64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedSint64Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedSint64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedStringField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedStringField"

    var decodeRepeatedStringField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedStringField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedStringField != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedStringField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedUInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedUInt32Field"

    var decodeRepeatedUint32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedUint32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedUint32Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedUint32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeRepeatedUInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedUInt64Field"

    var decodeRepeatedUint64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeRepeatedUint64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeRepeatedUint64Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeRepeatedUint64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingular: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingular"

    var decodeSingular: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingular)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingular != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingular, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularBoolField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularBoolField"

    var decodeSingularBoolField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularBoolField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularBoolField != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularBoolField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularBytesField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularBytesField"

    var decodeSingularBytesField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularBytesField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularBytesField != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularBytesField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularDoubleField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularDoubleField"

    var decodeSingularDoubleField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularDoubleField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularDoubleField != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularDoubleField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularEnumField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularEnumField"

    var decodeSingularEnumField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularEnumField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularEnumField != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularEnumField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularFixed32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularFixed32Field"

    var decodeSingularFixed32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularFixed32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularFixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularFixed32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularFixed64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularFixed64Field"

    var decodeSingularFixed64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularFixed64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularFixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularFixed64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularFloatField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularFloatField"

    var decodeSingularFloatField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularFloatField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularFloatField != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularFloatField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularGroupField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularGroupField"

    var decodeSingularGroupField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularGroupField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularGroupField != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularGroupField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularInt32Field"

    var decodeSingularInt32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularInt32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularInt32Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularInt32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularInt64Field"

    var decodeSingularInt64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularInt64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularInt64Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularInt64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularMessageField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularMessageField"

    var decodeSingularMessageField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularMessageField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularMessageField != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularMessageField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularSFixed32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularSFixed32Field"

    var decodeSingularSfixed32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularSfixed32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularSfixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularSfixed32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularSFixed64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularSFixed64Field"

    var decodeSingularSfixed64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularSfixed64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularSfixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularSfixed64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularSInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularSInt32Field"

    var decodeSingularSint32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularSint32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularSint32Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularSint32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularSInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularSInt64Field"

    var decodeSingularSint64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularSint64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularSint64Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularSint64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularStringField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularStringField"

    var decodeSingularStringField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularStringField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularStringField != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularStringField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularUInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularUInt32Field"

    var decodeSingularUint32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularUint32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularUint32Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularUint32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeSingularUInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularUInt64Field"

    var decodeSingularUint64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeSingularUint64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeSingularUint64Field != 0 {
        try visitor.visitSingularInt32Field(value: decodeSingularUint64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeString: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeString"

    var decodeString: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeString)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeString != 0 {
        try visitor.visitSingularInt32Field(value: decodeString, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decodeTextFormat: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".decodeTextFormat"

    var decodeTextFormat: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &decodeTextFormat)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if decodeTextFormat != 0 {
        try visitor.visitSingularInt32Field(value: decodeTextFormat, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct defaultValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".defaultValue"

    var defaultValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &defaultValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if defaultValue != 0 {
        try visitor.visitSingularInt32Field(value: defaultValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct descriptionMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".description"

    var description_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &description_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if description_p != 0 {
        try visitor.visitSingularInt32Field(value: description_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct destination: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".destination"

    var destination: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &destination)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if destination != 0 {
        try visitor.visitSingularInt32Field(value: destination, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Dictionary: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Dictionary"

    var dictionary: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &dictionary)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if dictionary != 0 {
        try visitor.visitSingularInt32Field(value: dictionary, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct dictionaryLiteral: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".dictionaryLiteral"

    var dictionaryLiteral: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &dictionaryLiteral)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if dictionaryLiteral != 0 {
        try visitor.visitSingularInt32Field(value: dictionaryLiteral, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct digit0: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".digit0"

    var digit0: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &digit0)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if digit0 != 0 {
        try visitor.visitSingularInt32Field(value: digit0, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct digit1: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".digit1"

    var digit1: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &digit1)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if digit1 != 0 {
        try visitor.visitSingularInt32Field(value: digit1, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct digitCount: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".digitCount"

    var digitCount: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &digitCount)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if digitCount != 0 {
        try visitor.visitSingularInt32Field(value: digitCount, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct digits: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".digits"

    var digits: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &digits)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if digits != 0 {
        try visitor.visitSingularInt32Field(value: digits, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct digitValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".digitValue"

    var digitValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &digitValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if digitValue != 0 {
        try visitor.visitSingularInt32Field(value: digitValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct discardableResult: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".discardableResult"

    var discardableResult: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &discardableResult)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if discardableResult != 0 {
        try visitor.visitSingularInt32Field(value: discardableResult, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct DispatchQueue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".DispatchQueue"

    var dispatchQueue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &dispatchQueue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if dispatchQueue != 0 {
        try visitor.visitSingularInt32Field(value: dispatchQueue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct div: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".div"

    var div: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &div)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if div != 0 {
        try visitor.visitSingularInt32Field(value: div, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct double: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".double"

    var double: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &double)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if double != 0 {
        try visitor.visitSingularInt32Field(value: double, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct doubleToUtf8: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".doubleToUtf8"

    var doubleToUtf8: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &doubleToUtf8)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if doubleToUtf8 != 0 {
        try visitor.visitSingularInt32Field(value: doubleToUtf8, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct DoubleValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".DoubleValue"

    var doubleValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &doubleValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if doubleValue != 0 {
        try visitor.visitSingularInt32Field(value: doubleValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Duration: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Duration"

    var duration: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &duration)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if duration != 0 {
        try visitor.visitSingularInt32Field(value: duration, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct E: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".E"

    var e: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &e)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if e != 0 {
        try visitor.visitSingularInt32Field(value: e, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Element: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Element"

    var element: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &element)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if element != 0 {
        try visitor.visitSingularInt32Field(value: element, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct elements: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".elements"

    var elements: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &elements)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if elements != 0 {
        try visitor.visitSingularInt32Field(value: elements, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct emitExtensionFieldName: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".emitExtensionFieldName"

    var emitExtensionFieldName: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &emitExtensionFieldName)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if emitExtensionFieldName != 0 {
        try visitor.visitSingularInt32Field(value: emitExtensionFieldName, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct emitFieldName: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".emitFieldName"

    var emitFieldName: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &emitFieldName)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if emitFieldName != 0 {
        try visitor.visitSingularInt32Field(value: emitFieldName, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct emitFieldNumber: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".emitFieldNumber"

    var emitFieldNumber: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &emitFieldNumber)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if emitFieldNumber != 0 {
        try visitor.visitSingularInt32Field(value: emitFieldNumber, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct emitVerboseTextForm: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".emitVerboseTextForm"

    var emitVerboseTextForm: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &emitVerboseTextForm)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if emitVerboseTextForm != 0 {
        try visitor.visitSingularInt32Field(value: emitVerboseTextForm, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Empty: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Empty"

    var empty: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &empty)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if empty != 0 {
        try visitor.visitSingularInt32Field(value: empty, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct encoded: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".encoded"

    var encoded: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &encoded)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if encoded != 0 {
        try visitor.visitSingularInt32Field(value: encoded, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct encodedJSONString: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".encodedJSONString"

    var encodedJsonstring: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &encodedJsonstring)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if encodedJsonstring != 0 {
        try visitor.visitSingularInt32Field(value: encodedJsonstring, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct encodedSize: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".encodedSize"

    var encodedSize: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &encodedSize)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if encodedSize != 0 {
        try visitor.visitSingularInt32Field(value: encodedSize, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct encodeField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".encodeField"

    var encodeField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &encodeField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if encodeField != 0 {
        try visitor.visitSingularInt32Field(value: encodeField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct encoder: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".encoder"

    var encoder: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &encoder)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if encoder != 0 {
        try visitor.visitSingularInt32Field(value: encoder, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct end: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".end"

    var end: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &end)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if end != 0 {
        try visitor.visitSingularInt32Field(value: end, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct endArray: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".endArray"

    var endArray: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &endArray)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if endArray != 0 {
        try visitor.visitSingularInt32Field(value: endArray, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct endMessageField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".endMessageField"

    var endMessageField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &endMessageField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if endMessageField != 0 {
        try visitor.visitSingularInt32Field(value: endMessageField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct endObject: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".endObject"

    var endObject: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &endObject)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if endObject != 0 {
        try visitor.visitSingularInt32Field(value: endObject, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct endRegularField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".endRegularField"

    var endRegularField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &endRegularField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if endRegularField != 0 {
        try visitor.visitSingularInt32Field(value: endRegularField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Enum: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Enum"

    var enum_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &enum_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if enum_p != 0 {
        try visitor.visitSingularInt32Field(value: enum_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct enumvalue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".enumvalue"

    var enumvalue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &enumvalue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if enumvalue != 0 {
        try visitor.visitSingularInt32Field(value: enumvalue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Equatable: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Equatable"

    var equatable: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &equatable)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if equatable != 0 {
        try visitor.visitSingularInt32Field(value: equatable, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ext: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ext"

    var ext: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &ext)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if ext != 0 {
        try visitor.visitSingularInt32Field(value: ext, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct extendedGraphemeClusterLiteral: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".extendedGraphemeClusterLiteral"

    var extendedGraphemeClusterLiteral: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &extendedGraphemeClusterLiteral)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if extendedGraphemeClusterLiteral != 0 {
        try visitor.visitSingularInt32Field(value: extendedGraphemeClusterLiteral, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ExtendedGraphemeClusterLiteralType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ExtendedGraphemeClusterLiteralType"

    var extendedGraphemeClusterLiteralType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &extendedGraphemeClusterLiteralType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if extendedGraphemeClusterLiteralType != 0 {
        try visitor.visitSingularInt32Field(value: extendedGraphemeClusterLiteralType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ExtensionFieldValueSet: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ExtensionFieldValueSet"

    var extensionFieldValueSet: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &extensionFieldValueSet)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if extensionFieldValueSet != 0 {
        try visitor.visitSingularInt32Field(value: extensionFieldValueSet, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ExtensionMap: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ExtensionMap"

    var extensionMap: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &extensionMap)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if extensionMap != 0 {
        try visitor.visitSingularInt32Field(value: extensionMap, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct extensions: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".extensions"

    var extensions: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &extensions)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if extensions != 0 {
        try visitor.visitSingularInt32Field(value: extensions, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct extras: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".extras"

    var extras: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &extras)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if extras != 0 {
        try visitor.visitSingularInt32Field(value: extras, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct f: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".f"

    var f: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &f)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if f != 0 {
        try visitor.visitSingularInt32Field(value: f, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct falseMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".false"

    var false_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &false_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if false_p != 0 {
        try visitor.visitSingularInt32Field(value: false_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".field"

    var field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if field != 0 {
        try visitor.visitSingularInt32Field(value: field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct FieldMask: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".FieldMask"

    var fieldMask: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fieldMask)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fieldMask != 0 {
        try visitor.visitSingularInt32Field(value: fieldMask, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fieldName: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fieldName"

    var fieldName: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fieldName)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fieldName != 0 {
        try visitor.visitSingularInt32Field(value: fieldName, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fieldNameCount: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fieldNameCount"

    var fieldNameCount: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fieldNameCount)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fieldNameCount != 0 {
        try visitor.visitSingularInt32Field(value: fieldNameCount, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fieldNumber: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fieldNumber"

    var fieldNumber_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fieldNumber_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fieldNumber_p != 0 {
        try visitor.visitSingularInt32Field(value: fieldNumber_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fieldNumberForProto: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fieldNumberForProto"

    var fieldNumberForProto: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fieldNumberForProto)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fieldNumberForProto != 0 {
        try visitor.visitSingularInt32Field(value: fieldNumberForProto, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fields: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fields"

    var fields: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fields)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fields != 0 {
        try visitor.visitSingularInt32Field(value: fields, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fieldSize: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fieldSize"

    var fieldSize: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fieldSize)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fieldSize != 0 {
        try visitor.visitSingularInt32Field(value: fieldSize, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct FieldTag: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".FieldTag"

    var fieldTag: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fieldTag)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fieldTag != 0 {
        try visitor.visitSingularInt32Field(value: fieldTag, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fieldType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fieldType"

    var fieldType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fieldType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fieldType != 0 {
        try visitor.visitSingularInt32Field(value: fieldType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fieldValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fieldValue"

    var fieldValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fieldValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fieldValue != 0 {
        try visitor.visitSingularInt32Field(value: fieldValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fileName: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fileName"

    var fileName: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fileName)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fileName != 0 {
        try visitor.visitSingularInt32Field(value: fileName, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fileprivateMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fileprivate"

    var fileprivate_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fileprivate_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fileprivate_p != 0 {
        try visitor.visitSingularInt32Field(value: fileprivate_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct firstItem: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".firstItem"

    var firstItem: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &firstItem)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if firstItem != 0 {
        try visitor.visitSingularInt32Field(value: firstItem, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct flatMap: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".flatMap"

    var flatMap: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &flatMap)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if flatMap != 0 {
        try visitor.visitSingularInt32Field(value: flatMap, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct float: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".float"

    var float: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &float)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if float != 0 {
        try visitor.visitSingularInt32Field(value: float, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct floatLiteral: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".floatLiteral"

    var floatLiteral: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &floatLiteral)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if floatLiteral != 0 {
        try visitor.visitSingularInt32Field(value: floatLiteral, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct FloatLiteralType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".FloatLiteralType"

    var floatLiteralType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &floatLiteralType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if floatLiteralType != 0 {
        try visitor.visitSingularInt32Field(value: floatLiteralType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct floatToUtf8: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".floatToUtf8"

    var floatToUtf8: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &floatToUtf8)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if floatToUtf8 != 0 {
        try visitor.visitSingularInt32Field(value: floatToUtf8, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct FloatValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".FloatValue"

    var floatValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &floatValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if floatValue != 0 {
        try visitor.visitSingularInt32Field(value: floatValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct forMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".for"

    var for_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &for_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if for_p != 0 {
        try visitor.visitSingularInt32Field(value: for_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct formatDuration: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".formatDuration"

    var formatDuration: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &formatDuration)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if formatDuration != 0 {
        try visitor.visitSingularInt32Field(value: formatDuration, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct formatTimestamp: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".formatTimestamp"

    var formatTimestamp: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &formatTimestamp)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if formatTimestamp != 0 {
        try visitor.visitSingularInt32Field(value: formatTimestamp, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct forMessageMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".forMessage"

    var forMessage: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &forMessage)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if forMessage != 0 {
        try visitor.visitSingularInt32Field(value: forMessage, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct forMessageName: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".forMessageName"

    var forMessageName: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &forMessageName)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if forMessageName != 0 {
        try visitor.visitSingularInt32Field(value: forMessageName, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct forReadingFrom: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".forReadingFrom"

    var forReadingFrom: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &forReadingFrom)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if forReadingFrom != 0 {
        try visitor.visitSingularInt32Field(value: forReadingFrom, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct forTypeURL: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".forTypeURL"

    var forTypeURL: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &forTypeURL)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if forTypeURL != 0 {
        try visitor.visitSingularInt32Field(value: forTypeURL, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct forWritingInto: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".forWritingInto"

    var forWritingInto: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &forWritingInto)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if forWritingInto != 0 {
        try visitor.visitSingularInt32Field(value: forWritingInto, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct from: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".from"

    var from: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &from)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if from != 0 {
        try visitor.visitSingularInt32Field(value: from, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fromAscii2: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fromAscii2"

    var fromAscii2: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fromAscii2)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fromAscii2 != 0 {
        try visitor.visitSingularInt32Field(value: fromAscii2, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fromAscii4: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fromAscii4"

    var fromAscii4: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fromAscii4)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fromAscii4 != 0 {
        try visitor.visitSingularInt32Field(value: fromAscii4, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fromHexDigit: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fromHexDigit"

    var fromHexDigit: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fromHexDigit)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fromHexDigit != 0 {
        try visitor.visitSingularInt32Field(value: fromHexDigit, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fromMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fromMessage"

    var fromMessage: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fromMessage)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fromMessage != 0 {
        try visitor.visitSingularInt32Field(value: fromMessage, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fromURL: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".fromURL"

    var fromURL: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &fromURL)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if fromURL != 0 {
        try visitor.visitSingularInt32Field(value: fromURL, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct funcMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".func"

    var func_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &func_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if func_p != 0 {
        try visitor.visitSingularInt32Field(value: func_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Functions: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Functions"

    var functions: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &functions)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if functions != 0 {
        try visitor.visitSingularInt32Field(value: functions, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct G: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".G"

    var g: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &g)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if g != 0 {
        try visitor.visitSingularInt32Field(value: g, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct generated: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".generated"

    var generated: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &generated)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if generated != 0 {
        try visitor.visitSingularInt32Field(value: generated, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct get: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".get"

    var get: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &get)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if get != 0 {
        try visitor.visitSingularInt32Field(value: get, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct getExtensionValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".getExtensionValue"

    var getExtensionValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &getExtensionValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if getExtensionValue != 0 {
        try visitor.visitSingularInt32Field(value: getExtensionValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Any: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Any"

    var googleProtobufAny: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufAny)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufAny != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufAny, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Api: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Api"

    var googleProtobufApi: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufApi)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufApi != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufApi, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_BoolValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_BoolValue"

    var googleProtobufBoolValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufBoolValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufBoolValue != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufBoolValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_BytesValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_BytesValue"

    var googleProtobufBytesValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufBytesValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufBytesValue != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufBytesValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_DoubleValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_DoubleValue"

    var googleProtobufDoubleValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufDoubleValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufDoubleValue != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufDoubleValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Duration: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Duration"

    var googleProtobufDuration: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufDuration)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufDuration != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufDuration, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Empty: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Empty"

    var googleProtobufEmpty: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufEmpty)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufEmpty != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufEmpty, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Enum: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Enum"

    var googleProtobufEnum: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufEnum)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufEnum != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufEnum, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_EnumValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_EnumValue"

    var googleProtobufEnumValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufEnumValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufEnumValue != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufEnumValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Field"

    var googleProtobufField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufField != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_FieldMask: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_FieldMask"

    var googleProtobufFieldMask: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufFieldMask)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufFieldMask != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufFieldMask, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_FloatValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_FloatValue"

    var googleProtobufFloatValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufFloatValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufFloatValue != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufFloatValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Int32Value: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Int32Value"

    var googleProtobufInt32Value: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufInt32Value)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufInt32Value != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufInt32Value, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Int64Value: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Int64Value"

    var googleProtobufInt64Value: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufInt64Value)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufInt64Value != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufInt64Value, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_ListValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_ListValue"

    var googleProtobufListValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufListValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufListValue != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufListValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Method: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Method"

    var googleProtobufMethod: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufMethod)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufMethod != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufMethod, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Mixin: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Mixin"

    var googleProtobufMixin: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufMixin)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufMixin != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufMixin, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_NullValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_NullValue"

    var googleProtobufNullValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufNullValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufNullValue != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufNullValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Option: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Option"

    var googleProtobufOption: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufOption)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufOption != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufOption, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_SourceContext: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_SourceContext"

    var googleProtobufSourceContext: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufSourceContext)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufSourceContext != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufSourceContext, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_StringValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_StringValue"

    var googleProtobufStringValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufStringValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufStringValue != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufStringValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Struct: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Struct"

    var googleProtobufStruct: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufStruct)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufStruct != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufStruct, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Syntax: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Syntax"

    var googleProtobufSyntax: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufSyntax)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufSyntax != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufSyntax, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Timestamp: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Timestamp"

    var googleProtobufTimestamp: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufTimestamp)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufTimestamp != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufTimestamp, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Type: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Type"

    var googleProtobufType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufType != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_UInt32Value: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_UInt32Value"

    var googleProtobufUint32Value: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufUint32Value)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufUint32Value != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufUint32Value, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_UInt64Value: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_UInt64Value"

    var googleProtobufUint64Value: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufUint64Value)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufUint64Value != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufUint64Value, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Google_Protobuf_Value: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Value"

    var googleProtobufValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &googleProtobufValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if googleProtobufValue != 0 {
        try visitor.visitSingularInt32Field(value: googleProtobufValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct gregorianDateFromSecondsSince1970: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".gregorianDateFromSecondsSince1970"

    var gregorianDateFromSecondsSince1970: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &gregorianDateFromSecondsSince1970)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if gregorianDateFromSecondsSince1970 != 0 {
        try visitor.visitSingularInt32Field(value: gregorianDateFromSecondsSince1970, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct group: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".group"

    var group: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &group)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if group != 0 {
        try visitor.visitSingularInt32Field(value: group, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct h: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".h"

    var h: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &h)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if h != 0 {
        try visitor.visitSingularInt32Field(value: h, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct handleConflictingOneOf: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".handleConflictingOneOf"

    var handleConflictingOneOf: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &handleConflictingOneOf)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if handleConflictingOneOf != 0 {
        try visitor.visitSingularInt32Field(value: handleConflictingOneOf, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct has: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".has"

    var has_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &has_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if has_p != 0 {
        try visitor.visitSingularInt32Field(value: has_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct hasExtensionValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".hasExtensionValue"

    var hasExtensionValue_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &hasExtensionValue_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if hasExtensionValue_p != 0 {
        try visitor.visitSingularInt32Field(value: hasExtensionValue_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct hash: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".hash"

    var hash_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &hash_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if hash_p != 0 {
        try visitor.visitSingularInt32Field(value: hash_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Hashable: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Hashable"

    var hashable_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &hashable_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if hashable_p != 0 {
        try visitor.visitSingularInt32Field(value: hashable_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct hashValueMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".hashValue"

    var hashValue_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &hashValue_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if hashValue_p != 0 {
        try visitor.visitSingularInt32Field(value: hashValue_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct HashVisitor: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".HashVisitor"

    var hashVisitor_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &hashVisitor_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if hashVisitor_p != 0 {
        try visitor.visitSingularInt32Field(value: hashVisitor_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct hasSourceContext: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".hasSourceContext"

    var hasSourceContext_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &hasSourceContext_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if hasSourceContext_p != 0 {
        try visitor.visitSingularInt32Field(value: hasSourceContext_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct hasValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".hasValue"

    var hasValue_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &hasValue_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if hasValue_p != 0 {
        try visitor.visitSingularInt32Field(value: hasValue_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct hh: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".hh"

    var hh: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &hh)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if hh != 0 {
        try visitor.visitSingularInt32Field(value: hh, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct hour: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".hour"

    var hour: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &hour)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if hour != 0 {
        try visitor.visitSingularInt32Field(value: hour, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct i: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".i"

    var i: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &i)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if i != 0 {
        try visitor.visitSingularInt32Field(value: i, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct index: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".index"

    var index: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &index)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if index != 0 {
        try visitor.visitSingularInt32Field(value: index, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct initMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".init"

    var init_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &init_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if init_p != 0 {
        try visitor.visitSingularInt32Field(value: init_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct inoutMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".inout"

    var inout_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &inout_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if inout_p != 0 {
        try visitor.visitSingularInt32Field(value: inout_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct insert: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".insert"

    var insert: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &insert)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if insert != 0 {
        try visitor.visitSingularInt32Field(value: insert, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct insertIntoSet: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".insertIntoSet"

    var insertIntoSet: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &insertIntoSet)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if insertIntoSet != 0 {
        try visitor.visitSingularInt32Field(value: insertIntoSet, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct IntMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Int"

    var int: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &int)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if int != 0 {
        try visitor.visitSingularInt32Field(value: int, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Int32Message: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Int32"

    var int32: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &int32)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if int32 != 0 {
        try visitor.visitSingularInt32Field(value: int32, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Int32Value: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Int32Value"

    var int32Value: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &int32Value)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if int32Value != 0 {
        try visitor.visitSingularInt32Field(value: int32Value, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Int64Message: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Int64"

    var int64: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &int64)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if int64 != 0 {
        try visitor.visitSingularInt32Field(value: int64, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Int64Value: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Int64Value"

    var int64Value: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &int64Value)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if int64Value != 0 {
        try visitor.visitSingularInt32Field(value: int64Value, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Int8: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Int8"

    var int8: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &int8)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if int8 != 0 {
        try visitor.visitSingularInt32Field(value: int8, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct integerLiteral: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".integerLiteral"

    var integerLiteral: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &integerLiteral)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if integerLiteral != 0 {
        try visitor.visitSingularInt32Field(value: integerLiteral, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct IntegerLiteralType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".IntegerLiteralType"

    var integerLiteralType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &integerLiteralType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if integerLiteralType != 0 {
        try visitor.visitSingularInt32Field(value: integerLiteralType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct intern: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".intern"

    var intern: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &intern)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if intern != 0 {
        try visitor.visitSingularInt32Field(value: intern, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct internalMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".internal"

    var internal_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &internal_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if internal_p != 0 {
        try visitor.visitSingularInt32Field(value: internal_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct InternalState: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".InternalState"

    var internalState: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &internalState)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if internalState != 0 {
        try visitor.visitSingularInt32Field(value: internalState, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct isA: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".isA"

    var isA: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &isA)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if isA != 0 {
        try visitor.visitSingularInt32Field(value: isA, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct isEqualMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".isEqual"

    var isEqual: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &isEqual)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if isEqual != 0 {
        try visitor.visitSingularInt32Field(value: isEqual, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct isEqualTo: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".isEqualTo"

    var isEqualTo: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &isEqualTo)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if isEqualTo != 0 {
        try visitor.visitSingularInt32Field(value: isEqualTo, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct isInitialized: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".isInitialized"

    var isInitialized_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &isInitialized_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if isInitialized_p != 0 {
        try visitor.visitSingularInt32Field(value: isInitialized_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct it: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".it"

    var it: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &it)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if it != 0 {
        try visitor.visitSingularInt32Field(value: it, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct i_2166136261: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".i_2166136261"

    var i2166136261: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &i2166136261)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if i2166136261 != 0 {
        try visitor.visitSingularInt32Field(value: i2166136261, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct json: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".json"

    var json: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &json)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if json != 0 {
        try visitor.visitSingularInt32Field(value: json, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct JSONDecoder: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".JSONDecoder"

    var jsondecoder: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &jsondecoder)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if jsondecoder != 0 {
        try visitor.visitSingularInt32Field(value: jsondecoder, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct jsonEncoder: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".jsonEncoder"

    var jsonEncoder: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &jsonEncoder)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if jsonEncoder != 0 {
        try visitor.visitSingularInt32Field(value: jsonEncoder, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct JSONEncodingVisitor: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".JSONEncodingVisitor"

    var jsonencodingVisitor: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &jsonencodingVisitor)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if jsonencodingVisitor != 0 {
        try visitor.visitSingularInt32Field(value: jsonencodingVisitor, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct JSONMapEncodingVisitor: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".JSONMapEncodingVisitor"

    var jsonmapEncodingVisitor: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &jsonmapEncodingVisitor)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if jsonmapEncodingVisitor != 0 {
        try visitor.visitSingularInt32Field(value: jsonmapEncodingVisitor, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct jsonName: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".jsonName"

    var jsonName: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &jsonName)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if jsonName != 0 {
        try visitor.visitSingularInt32Field(value: jsonName, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct jsonPath: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".jsonPath"

    var jsonPath: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &jsonPath)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if jsonPath != 0 {
        try visitor.visitSingularInt32Field(value: jsonPath, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct jsonPaths: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".jsonPaths"

    var jsonPaths: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &jsonPaths)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if jsonPaths != 0 {
        try visitor.visitSingularInt32Field(value: jsonPaths, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct JSONScanner: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".JSONScanner"

    var jsonscanner: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &jsonscanner)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if jsonscanner != 0 {
        try visitor.visitSingularInt32Field(value: jsonscanner, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct jsonString: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".jsonString"

    var jsonString: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &jsonString)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if jsonString != 0 {
        try visitor.visitSingularInt32Field(value: jsonString, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct jsonText: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".jsonText"

    var jsonText: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &jsonText)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if jsonText != 0 {
        try visitor.visitSingularInt32Field(value: jsonText, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct JSONToProto: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".JSONToProto"

    var jsontoProto: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &jsontoProto)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if jsontoProto != 0 {
        try visitor.visitSingularInt32Field(value: jsontoProto, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct jsonUTF8Data: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".jsonUTF8Data"

    var jsonUtf8Data: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &jsonUtf8Data)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if jsonUtf8Data != 0 {
        try visitor.visitSingularInt32Field(value: jsonUtf8Data, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct julianDayNumberFromSecondsSince1970: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".julianDayNumberFromSecondsSince1970"

    var julianDayNumberFromSecondsSince1970: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &julianDayNumberFromSecondsSince1970)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if julianDayNumberFromSecondsSince1970 != 0 {
        try visitor.visitSingularInt32Field(value: julianDayNumberFromSecondsSince1970, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct k: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".k"

    var k: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &k)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if k != 0 {
        try visitor.visitSingularInt32Field(value: k, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Key: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Key"

    var key: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &key)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if key != 0 {
        try visitor.visitSingularInt32Field(value: key, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct keyField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".keyField"

    var keyField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &keyField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if keyField != 0 {
        try visitor.visitSingularInt32Field(value: keyField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct KeyType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".KeyType"

    var keyType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &keyType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if keyType != 0 {
        try visitor.visitSingularInt32Field(value: keyType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct kind: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".kind"

    var kind: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &kind)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if kind != 0 {
        try visitor.visitSingularInt32Field(value: kind, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct knownTypes: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".knownTypes"

    var knownTypes: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &knownTypes)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if knownTypes != 0 {
        try visitor.visitSingularInt32Field(value: knownTypes, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct l: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".l"

    var l: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &l)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if l != 0 {
        try visitor.visitSingularInt32Field(value: l, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct label: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".label"

    var label: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &label)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if label != 0 {
        try visitor.visitSingularInt32Field(value: label, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct length: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".length"

    var length: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &length)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if length != 0 {
        try visitor.visitSingularInt32Field(value: length, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct letMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".let"

    var let_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &let_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let_p != 0 {
        try visitor.visitSingularInt32Field(value: let_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct lhs: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".lhs"

    var lhs: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &lhs)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if lhs != 0 {
        try visitor.visitSingularInt32Field(value: lhs, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct listOfMessages: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".listOfMessages"

    var listOfMessages: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &listOfMessages)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if listOfMessages != 0 {
        try visitor.visitSingularInt32Field(value: listOfMessages, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct listValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".listValue"

    var listValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &listValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if listValue != 0 {
        try visitor.visitSingularInt32Field(value: listValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct littleEndian: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".littleEndian"

    var littleEndian: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &littleEndian)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if littleEndian != 0 {
        try visitor.visitSingularInt32Field(value: littleEndian, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct littleEndianBytes: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".littleEndianBytes"

    var littleEndianBytes: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &littleEndianBytes)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if littleEndianBytes != 0 {
        try visitor.visitSingularInt32Field(value: littleEndianBytes, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct M: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".M"

    var m: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &m)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if m != 0 {
        try visitor.visitSingularInt32Field(value: m, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct major: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".major"

    var major: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &major)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if major != 0 {
        try visitor.visitSingularInt32Field(value: major, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct makeIterator: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".makeIterator"

    var makeIterator: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &makeIterator)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if makeIterator != 0 {
        try visitor.visitSingularInt32Field(value: makeIterator, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct mapHash: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".mapHash"

    var mapHash: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &mapHash)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if mapHash != 0 {
        try visitor.visitSingularInt32Field(value: mapHash, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct MapKeyType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".MapKeyType"

    var mapKeyType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &mapKeyType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if mapKeyType != 0 {
        try visitor.visitSingularInt32Field(value: mapKeyType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct mapNameResolver: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".mapNameResolver"

    var mapNameResolver: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &mapNameResolver)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if mapNameResolver != 0 {
        try visitor.visitSingularInt32Field(value: mapNameResolver, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct mapToMessages: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".mapToMessages"

    var mapToMessages: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &mapToMessages)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if mapToMessages != 0 {
        try visitor.visitSingularInt32Field(value: mapToMessages, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct MapValueType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".MapValueType"

    var mapValueType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &mapValueType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if mapValueType != 0 {
        try visitor.visitSingularInt32Field(value: mapValueType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct mapVisitor: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".mapVisitor"

    var mapVisitor: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &mapVisitor)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if mapVisitor != 0 {
        try visitor.visitSingularInt32Field(value: mapVisitor, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct mdayStart: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".mdayStart"

    var mdayStart: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &mdayStart)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if mdayStart != 0 {
        try visitor.visitSingularInt32Field(value: mdayStart, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct members: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".members"

    var members: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &members)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if members != 0 {
        try visitor.visitSingularInt32Field(value: members, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct merge: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".merge"

    var merge: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &merge)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if merge != 0 {
        try visitor.visitSingularInt32Field(value: merge, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct message: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".message"

    var message: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &message)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if message != 0 {
        try visitor.visitSingularInt32Field(value: message, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct MessageExtension: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".MessageExtension"

    var messageExtension: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &messageExtension)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if messageExtension != 0 {
        try visitor.visitSingularInt32Field(value: messageExtension, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct MessageExtensionBase: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".MessageExtensionBase"

    var messageExtensionBase: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &messageExtensionBase)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if messageExtensionBase != 0 {
        try visitor.visitSingularInt32Field(value: messageExtensionBase, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct messageType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".messageType"

    var messageType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &messageType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if messageType != 0 {
        try visitor.visitSingularInt32Field(value: messageType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Method: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Method"

    var method: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &method)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if method != 0 {
        try visitor.visitSingularInt32Field(value: method, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct methods: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".methods"

    var methods: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &methods)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if methods != 0 {
        try visitor.visitSingularInt32Field(value: methods, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct minor: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".minor"

    var minor: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &minor)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if minor != 0 {
        try visitor.visitSingularInt32Field(value: minor, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Mixin: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Mixin"

    var mixin: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &mixin)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if mixin != 0 {
        try visitor.visitSingularInt32Field(value: mixin, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct mixins: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".mixins"

    var mixins: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &mixins)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if mixins != 0 {
        try visitor.visitSingularInt32Field(value: mixins, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct mm: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".mm"

    var mm: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &mm)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if mm != 0 {
        try visitor.visitSingularInt32Field(value: mm, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct mod: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".mod"

    var mod: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &mod)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if mod != 0 {
        try visitor.visitSingularInt32Field(value: mod, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct month: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".month"

    var month: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &month)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if month != 0 {
        try visitor.visitSingularInt32Field(value: month, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct mutating: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".mutating"

    var mutating: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &mutating)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if mutating != 0 {
        try visitor.visitSingularInt32Field(value: mutating, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct n: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".n"

    var n: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &n)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if n != 0 {
        try visitor.visitSingularInt32Field(value: n, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct name: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".name"

    var name: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &name)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if name != 0 {
        try visitor.visitSingularInt32Field(value: name, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct NameDescription: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".NameDescription"

    var nameDescription: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &nameDescription)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if nameDescription != 0 {
        try visitor.visitSingularInt32Field(value: nameDescription, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct NameMap: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".NameMap"

    var nameMap: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &nameMap)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if nameMap != 0 {
        try visitor.visitSingularInt32Field(value: nameMap, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct nameResolver: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".nameResolver"

    var nameResolver: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &nameResolver)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if nameResolver != 0 {
        try visitor.visitSingularInt32Field(value: nameResolver, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct names: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".names"

    var names: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &names)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if names != 0 {
        try visitor.visitSingularInt32Field(value: names, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct nanos: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".nanos"

    var nanos: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &nanos)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if nanos != 0 {
        try visitor.visitSingularInt32Field(value: nanos, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct nativeBytes: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".nativeBytes"

    var nativeBytes: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &nativeBytes)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if nativeBytes != 0 {
        try visitor.visitSingularInt32Field(value: nativeBytes, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct nativeEndianBytes: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".nativeEndianBytes"

    var nativeEndianBytes: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &nativeEndianBytes)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if nativeEndianBytes != 0 {
        try visitor.visitSingularInt32Field(value: nativeEndianBytes, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct newL: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".newL"

    var newL: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &newL)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if newL != 0 {
        try visitor.visitSingularInt32Field(value: newL, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct newValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".newValue"

    var newValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &newValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if newValue != 0 {
        try visitor.visitSingularInt32Field(value: newValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct nextFieldNumber: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".nextFieldNumber"

    var nextFieldNumber: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &nextFieldNumber)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if nextFieldNumber != 0 {
        try visitor.visitSingularInt32Field(value: nextFieldNumber, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct nilMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".nil"

    var nil_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &nil_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if nil_p != 0 {
        try visitor.visitSingularInt32Field(value: nil_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct nilLiteral: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".nilLiteral"

    var nilLiteral: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &nilLiteral)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if nilLiteral != 0 {
        try visitor.visitSingularInt32Field(value: nilLiteral, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct no: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".no"

    var no: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &no)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if no != 0 {
        try visitor.visitSingularInt32Field(value: no, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct normalizeForDuration: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".normalizeForDuration"

    var normalizeForDuration: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &normalizeForDuration)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if normalizeForDuration != 0 {
        try visitor.visitSingularInt32Field(value: normalizeForDuration, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct normalizeForTimestamp: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".normalizeForTimestamp"

    var normalizeForTimestamp: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &normalizeForTimestamp)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if normalizeForTimestamp != 0 {
        try visitor.visitSingularInt32Field(value: normalizeForTimestamp, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct nullValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".nullValue"

    var nullValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &nullValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if nullValue != 0 {
        try visitor.visitSingularInt32Field(value: nullValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct number: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".number"

    var number: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &number)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if number != 0 {
        try visitor.visitSingularInt32Field(value: number, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct numberValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".numberValue"

    var numberValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &numberValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if numberValue != 0 {
        try visitor.visitSingularInt32Field(value: numberValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct of: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".of"

    var of: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &of)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if of != 0 {
        try visitor.visitSingularInt32Field(value: of, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct oneofIndex: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".oneofIndex"

    var oneofIndex: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &oneofIndex)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if oneofIndex != 0 {
        try visitor.visitSingularInt32Field(value: oneofIndex, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct oneofs: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".oneofs"

    var oneofs: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &oneofs)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if oneofs != 0 {
        try visitor.visitSingularInt32Field(value: oneofs, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct OneOf_Kind: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".OneOf_Kind"

    var oneOfKind: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &oneOfKind)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if oneOfKind != 0 {
        try visitor.visitSingularInt32Field(value: oneOfKind, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct only: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".only"

    var only: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &only)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if only != 0 {
        try visitor.visitSingularInt32Field(value: only, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Option: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Option"

    var option: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &option)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if option != 0 {
        try visitor.visitSingularInt32Field(value: option, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct OptionalEnumExtensionField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".OptionalEnumExtensionField"

    var optionalEnumExtensionField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &optionalEnumExtensionField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if optionalEnumExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: optionalEnumExtensionField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct OptionalExtensionField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".OptionalExtensionField"

    var optionalExtensionField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &optionalExtensionField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if optionalExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: optionalExtensionField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct OptionalGroupExtensionField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".OptionalGroupExtensionField"

    var optionalGroupExtensionField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &optionalGroupExtensionField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if optionalGroupExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: optionalGroupExtensionField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct OptionalMessageExtensionField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".OptionalMessageExtensionField"

    var optionalMessageExtensionField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &optionalMessageExtensionField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if optionalMessageExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: optionalMessageExtensionField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct options: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".options"

    var options: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &options)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if options != 0 {
        try visitor.visitSingularInt32Field(value: options, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct other: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".other"

    var other_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &other_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if other_p != 0 {
        try visitor.visitSingularInt32Field(value: other_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct out: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".out"

    var out: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &out)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if out != 0 {
        try visitor.visitSingularInt32Field(value: out, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct output: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".output"

    var output: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &output)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if output != 0 {
        try visitor.visitSingularInt32Field(value: output, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct p: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".p"

    var p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if p != 0 {
        try visitor.visitSingularInt32Field(value: p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct packed: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".packed"

    var packed: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &packed)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if packed != 0 {
        try visitor.visitSingularInt32Field(value: packed, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct PackedEnumExtensionField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".PackedEnumExtensionField"

    var packedEnumExtensionField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &packedEnumExtensionField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if packedEnumExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: packedEnumExtensionField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct PackedExtensionField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".PackedExtensionField"

    var packedExtensionField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &packedExtensionField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if packedExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: packedExtensionField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct packedSize: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".packedSize"

    var packedSize: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &packedSize)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if packedSize != 0 {
        try visitor.visitSingularInt32Field(value: packedSize, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct parseDuration: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".parseDuration"

    var parseDuration: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &parseDuration)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if parseDuration != 0 {
        try visitor.visitSingularInt32Field(value: parseDuration, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct parseJSONFieldNames: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".parseJSONFieldNames"

    var parseJsonfieldNames: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &parseJsonfieldNames)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if parseJsonfieldNames != 0 {
        try visitor.visitSingularInt32Field(value: parseJsonfieldNames, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct parseTimestamp: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".parseTimestamp"

    var parseTimestamp: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &parseTimestamp)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if parseTimestamp != 0 {
        try visitor.visitSingularInt32Field(value: parseTimestamp, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct partial: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".partial"

    var partial: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &partial)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if partial != 0 {
        try visitor.visitSingularInt32Field(value: partial, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct path: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".path"

    var path: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &path)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if path != 0 {
        try visitor.visitSingularInt32Field(value: path, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct paths: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".paths"

    var paths: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &paths)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if paths != 0 {
        try visitor.visitSingularInt32Field(value: paths, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct pointer: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".pointer"

    var pointer: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &pointer)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if pointer != 0 {
        try visitor.visitSingularInt32Field(value: pointer, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct pos: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".pos"

    var pos: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &pos)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if pos != 0 {
        try visitor.visitSingularInt32Field(value: pos, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct prefix: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".prefix"

    var prefix: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &prefix)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if prefix != 0 {
        try visitor.visitSingularInt32Field(value: prefix, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct preTraverse: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".preTraverse"

    var preTraverse: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &preTraverse)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if preTraverse != 0 {
        try visitor.visitSingularInt32Field(value: preTraverse, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct privateMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".private"

    var private_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &private_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if private_p != 0 {
        try visitor.visitSingularInt32Field(value: private_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct proto: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".proto"

    var proto: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &proto)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if proto != 0 {
        try visitor.visitSingularInt32Field(value: proto, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct proto2: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".proto2"

    var proto2: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &proto2)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if proto2 != 0 {
        try visitor.visitSingularInt32Field(value: proto2, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct proto3DefaultValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".proto3DefaultValue"

    var proto3DefaultValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &proto3DefaultValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if proto3DefaultValue != 0 {
        try visitor.visitSingularInt32Field(value: proto3DefaultValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtobufBool: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufBool"

    var protobufBool: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufBool)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufBool != 0 {
        try visitor.visitSingularInt32Field(value: protobufBool, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtobufBytes: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufBytes"

    var protobufBytes: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufBytes)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufBytes != 0 {
        try visitor.visitSingularInt32Field(value: protobufBytes, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtobufDouble: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufDouble"

    var protobufDouble: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufDouble)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufDouble != 0 {
        try visitor.visitSingularInt32Field(value: protobufDouble, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtobufEnumMap: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufEnumMap"

    var protobufEnumMap: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufEnumMap)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufEnumMap != 0 {
        try visitor.visitSingularInt32Field(value: protobufEnumMap, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct protobufExtension: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".protobufExtension"

    var protobufExtension: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufExtension)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufExtension != 0 {
        try visitor.visitSingularInt32Field(value: protobufExtension, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtobufFloat: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufFloat"

    var protobufFloat: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufFloat)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufFloat != 0 {
        try visitor.visitSingularInt32Field(value: protobufFloat, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtobufInt32: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufInt32"

    var protobufInt32: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufInt32)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufInt32 != 0 {
        try visitor.visitSingularInt32Field(value: protobufInt32, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtobufInt64: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufInt64"

    var protobufInt64: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufInt64)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufInt64 != 0 {
        try visitor.visitSingularInt32Field(value: protobufInt64, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtobufMap: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufMap"

    var protobufMap: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufMap)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufMap != 0 {
        try visitor.visitSingularInt32Field(value: protobufMap, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtobufMessageMap: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufMessageMap"

    var protobufMessageMap: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufMessageMap)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufMessageMap != 0 {
        try visitor.visitSingularInt32Field(value: protobufMessageMap, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtobufString: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufString"

    var protobufString: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufString)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufString != 0 {
        try visitor.visitSingularInt32Field(value: protobufString, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtobufUInt32: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufUInt32"

    var protobufUint32: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufUint32)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufUint32 != 0 {
        try visitor.visitSingularInt32Field(value: protobufUint32, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtobufUInt64: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufUInt64"

    var protobufUint64: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufUint64)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufUint64 != 0 {
        try visitor.visitSingularInt32Field(value: protobufUint64, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct protobuf_extensionFieldValues: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".protobuf_extensionFieldValues"

    var protobufExtensionFieldValues: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufExtensionFieldValues)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufExtensionFieldValues != 0 {
        try visitor.visitSingularInt32Field(value: protobufExtensionFieldValues, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct protobuf_fieldNumber: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".protobuf_fieldNumber"

    var protobufFieldNumber: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufFieldNumber)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufFieldNumber != 0 {
        try visitor.visitSingularInt32Field(value: protobufFieldNumber, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct protobuf_generated_isEqualTo: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".protobuf_generated_isEqualTo"

    var protobufGeneratedIsEqualTo: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufGeneratedIsEqualTo)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufGeneratedIsEqualTo != 0 {
        try visitor.visitSingularInt32Field(value: protobufGeneratedIsEqualTo, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct protobuf_nameMap: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".protobuf_nameMap"

    var protobufNameMap: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufNameMap)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufNameMap != 0 {
        try visitor.visitSingularInt32Field(value: protobufNameMap, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct protobuf_newField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".protobuf_newField"

    var protobufNewField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufNewField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufNewField != 0 {
        try visitor.visitSingularInt32Field(value: protobufNewField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct protobuf_package: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".protobuf_package"

    var protobufPackage: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufPackage)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufPackage != 0 {
        try visitor.visitSingularInt32Field(value: protobufPackage, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct protobuf_set: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".protobuf_set"

    var protobufSet: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protobufSet)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protobufSet != 0 {
        try visitor.visitSingularInt32Field(value: protobufSet, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct protoFieldName: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".protoFieldName"

    var protoFieldName: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protoFieldName)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protoFieldName != 0 {
        try visitor.visitSingularInt32Field(value: protoFieldName, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct protoMessageNameMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".protoMessageName"

    var protoMessageName: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protoMessageName)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protoMessageName != 0 {
        try visitor.visitSingularInt32Field(value: protoMessageName, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct protoPaths: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".protoPaths"

    var protoPaths: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protoPaths)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protoPaths != 0 {
        try visitor.visitSingularInt32Field(value: protoPaths, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtoToJSON: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ProtoToJSON"

    var protoToJson: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &protoToJson)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if protoToJson != 0 {
        try visitor.visitSingularInt32Field(value: protoToJson, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct publicMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".public"

    var public_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &public_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if public_p != 0 {
        try visitor.visitSingularInt32Field(value: public_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct putBoolValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".putBoolValue"

    var putBoolValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &putBoolValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if putBoolValue != 0 {
        try visitor.visitSingularInt32Field(value: putBoolValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct putBytesValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".putBytesValue"

    var putBytesValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &putBytesValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if putBytesValue != 0 {
        try visitor.visitSingularInt32Field(value: putBytesValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct putDoubleValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".putDoubleValue"

    var putDoubleValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &putDoubleValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if putDoubleValue != 0 {
        try visitor.visitSingularInt32Field(value: putDoubleValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct putEnumValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".putEnumValue"

    var putEnumValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &putEnumValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if putEnumValue != 0 {
        try visitor.visitSingularInt32Field(value: putEnumValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct putFixedUInt32: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".putFixedUInt32"

    var putFixedUint32: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &putFixedUint32)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if putFixedUint32 != 0 {
        try visitor.visitSingularInt32Field(value: putFixedUint32, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct putFixedUInt64: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".putFixedUInt64"

    var putFixedUint64: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &putFixedUint64)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if putFixedUint64 != 0 {
        try visitor.visitSingularInt32Field(value: putFixedUint64, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct putFloatValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".putFloatValue"

    var putFloatValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &putFloatValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if putFloatValue != 0 {
        try visitor.visitSingularInt32Field(value: putFloatValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct putInt64: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".putInt64"

    var putInt64: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &putInt64)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if putInt64 != 0 {
        try visitor.visitSingularInt32Field(value: putInt64, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct putStringValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".putStringValue"

    var putStringValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &putStringValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if putStringValue != 0 {
        try visitor.visitSingularInt32Field(value: putStringValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct putUInt64: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".putUInt64"

    var putUint64: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &putUint64)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if putUint64 != 0 {
        try visitor.visitSingularInt32Field(value: putUint64, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct putUInt64Hex: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".putUInt64Hex"

    var putUint64Hex: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &putUint64Hex)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if putUint64Hex != 0 {
        try visitor.visitSingularInt32Field(value: putUint64Hex, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct putVarInt: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".putVarInt"

    var putVarInt: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &putVarInt)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if putVarInt != 0 {
        try visitor.visitSingularInt32Field(value: putVarInt, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct putZigZagVarInt: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".putZigZagVarInt"

    var putZigZagVarInt: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &putZigZagVarInt)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if putZigZagVarInt != 0 {
        try visitor.visitSingularInt32Field(value: putZigZagVarInt, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct RawValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".RawValue"

    var rawValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &rawValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if rawValue != 0 {
        try visitor.visitSingularInt32Field(value: rawValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct register: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".register"

    var register: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &register)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if register != 0 {
        try visitor.visitSingularInt32Field(value: register, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct RepeatedEnumExtensionField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".RepeatedEnumExtensionField"

    var repeatedEnumExtensionField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &repeatedEnumExtensionField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if repeatedEnumExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: repeatedEnumExtensionField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct RepeatedExtensionField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".RepeatedExtensionField"

    var repeatedExtensionField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &repeatedExtensionField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if repeatedExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: repeatedExtensionField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct RepeatedGroupExtensionField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".RepeatedGroupExtensionField"

    var repeatedGroupExtensionField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &repeatedGroupExtensionField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if repeatedGroupExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: repeatedGroupExtensionField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct RepeatedMessageExtensionField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".RepeatedMessageExtensionField"

    var repeatedMessageExtensionField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &repeatedMessageExtensionField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if repeatedMessageExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: repeatedMessageExtensionField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct requestStreaming: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".requestStreaming"

    var requestStreaming: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &requestStreaming)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if requestStreaming != 0 {
        try visitor.visitSingularInt32Field(value: requestStreaming, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct requestTypeURL: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".requestTypeURL"

    var requestTypeURL: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &requestTypeURL)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if requestTypeURL != 0 {
        try visitor.visitSingularInt32Field(value: requestTypeURL, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct requiredSize: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".requiredSize"

    var requiredSize: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &requiredSize)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if requiredSize != 0 {
        try visitor.visitSingularInt32Field(value: requiredSize, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct responseStreaming: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".responseStreaming"

    var responseStreaming: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &responseStreaming)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if responseStreaming != 0 {
        try visitor.visitSingularInt32Field(value: responseStreaming, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct responseTypeURL: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".responseTypeURL"

    var responseTypeURL: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &responseTypeURL)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if responseTypeURL != 0 {
        try visitor.visitSingularInt32Field(value: responseTypeURL, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct result: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".result"

    var result: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &result)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if result != 0 {
        try visitor.visitSingularInt32Field(value: result, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct returnMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".return"

    var return_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &return_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if return_p != 0 {
        try visitor.visitSingularInt32Field(value: return_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct revision: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".revision"

    var revision: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &revision)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if revision != 0 {
        try visitor.visitSingularInt32Field(value: revision, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct rhs: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".rhs"

    var rhs: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &rhs)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if rhs != 0 {
        try visitor.visitSingularInt32Field(value: rhs, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct root: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".root"

    var root: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &root)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if root != 0 {
        try visitor.visitSingularInt32Field(value: root, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct s: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".s"

    var s: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &s)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if s != 0 {
        try visitor.visitSingularInt32Field(value: s, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct savedPosition: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".savedPosition"

    var savedPosition: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &savedPosition)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if savedPosition != 0 {
        try visitor.visitSingularInt32Field(value: savedPosition, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct sawBackslash: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".sawBackslash"

    var sawBackslash: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &sawBackslash)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if sawBackslash != 0 {
        try visitor.visitSingularInt32Field(value: sawBackslash, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct scanner: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".scanner"

    var scanner: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &scanner)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if scanner != 0 {
        try visitor.visitSingularInt32Field(value: scanner, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct seconds: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".seconds"

    var seconds: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &seconds)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if seconds != 0 {
        try visitor.visitSingularInt32Field(value: seconds, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct selfMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".self"

    var self_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self_p != 0 {
        try visitor.visitSingularInt32Field(value: self_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct separator: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".separator"

    var separator: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &separator)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if separator != 0 {
        try visitor.visitSingularInt32Field(value: separator, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct serializeAnyJSON: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".serializeAnyJSON"

    var serializeAnyJson: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &serializeAnyJson)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if serializeAnyJson != 0 {
        try visitor.visitSingularInt32Field(value: serializeAnyJson, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct serializedData: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".serializedData"

    var serializedData: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &serializedData)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if serializedData != 0 {
        try visitor.visitSingularInt32Field(value: serializedData, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct serializedSize: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".serializedSize"

    var serializedSize: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &serializedSize)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if serializedSize != 0 {
        try visitor.visitSingularInt32Field(value: serializedSize, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct serialQueue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".serialQueue"

    var serialQueue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &serialQueue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if serialQueue != 0 {
        try visitor.visitSingularInt32Field(value: serialQueue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct set: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".set"

    var set: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &set)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if set != 0 {
        try visitor.visitSingularInt32Field(value: set, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct setExtensionValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".setExtensionValue"

    var setExtensionValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &setExtensionValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if setExtensionValue != 0 {
        try visitor.visitSingularInt32Field(value: setExtensionValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct shift: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".shift"

    var shift: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &shift)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if shift != 0 {
        try visitor.visitSingularInt32Field(value: shift, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct SignedInteger: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".SignedInteger"

    var signedInteger: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &signedInteger)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if signedInteger != 0 {
        try visitor.visitSingularInt32Field(value: signedInteger, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct SimpleExtensionMap: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".SimpleExtensionMap"

    var simpleExtensionMap: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &simpleExtensionMap)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if simpleExtensionMap != 0 {
        try visitor.visitSingularInt32Field(value: simpleExtensionMap, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct sizer: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".sizer"

    var sizer: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &sizer)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if sizer != 0 {
        try visitor.visitSingularInt32Field(value: sizer, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct slowUtf8ToString: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".slowUtf8ToString"

    var slowUtf8ToString: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &slowUtf8ToString)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if slowUtf8ToString != 0 {
        try visitor.visitSingularInt32Field(value: slowUtf8ToString, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct sourceContext: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".sourceContext"

    var sourceContext: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &sourceContext)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if sourceContext != 0 {
        try visitor.visitSingularInt32Field(value: sourceContext, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct split: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".split"

    var split: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &split)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if split != 0 {
        try visitor.visitSingularInt32Field(value: split, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ss: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ss"

    var ss: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &ss)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if ss != 0 {
        try visitor.visitSingularInt32Field(value: ss, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct start: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".start"

    var start: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &start)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if start != 0 {
        try visitor.visitSingularInt32Field(value: start, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct startArray: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".startArray"

    var startArray: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &startArray)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if startArray != 0 {
        try visitor.visitSingularInt32Field(value: startArray, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct startField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".startField"

    var startField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &startField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if startField != 0 {
        try visitor.visitSingularInt32Field(value: startField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct startIndex: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".startIndex"

    var startIndex: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &startIndex)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if startIndex != 0 {
        try visitor.visitSingularInt32Field(value: startIndex, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct startMessageField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".startMessageField"

    var startMessageField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &startMessageField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if startMessageField != 0 {
        try visitor.visitSingularInt32Field(value: startMessageField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct startObject: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".startObject"

    var startObject: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &startObject)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if startObject != 0 {
        try visitor.visitSingularInt32Field(value: startObject, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct startRegularField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".startRegularField"

    var startRegularField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &startRegularField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if startRegularField != 0 {
        try visitor.visitSingularInt32Field(value: startRegularField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct state: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".state"

    var state: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &state)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if state != 0 {
        try visitor.visitSingularInt32Field(value: state, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct staticMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".static"

    var static_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &static_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if static_p != 0 {
        try visitor.visitSingularInt32Field(value: static_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct StaticString: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".StaticString"

    var staticString: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &staticString)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if staticString != 0 {
        try visitor.visitSingularInt32Field(value: staticString, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct storage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".storage"

    var storage: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &storage)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if storage != 0 {
        try visitor.visitSingularInt32Field(value: storage, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct StorageClass: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".StorageClass"

    var storageClass: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &storageClass)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if storageClass != 0 {
        try visitor.visitSingularInt32Field(value: storageClass, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct StringMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".String"

    var string: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &string)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if string != 0 {
        try visitor.visitSingularInt32Field(value: string, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct stringLiteral: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".stringLiteral"

    var stringLiteral: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &stringLiteral)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if stringLiteral != 0 {
        try visitor.visitSingularInt32Field(value: stringLiteral, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct StringLiteralType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".StringLiteralType"

    var stringLiteralType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &stringLiteralType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if stringLiteralType != 0 {
        try visitor.visitSingularInt32Field(value: stringLiteralType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct stringResult: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".stringResult"

    var stringResult: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &stringResult)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if stringResult != 0 {
        try visitor.visitSingularInt32Field(value: stringResult, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct stringValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".stringValue"

    var stringValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &stringValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if stringValue != 0 {
        try visitor.visitSingularInt32Field(value: stringValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Struct: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Struct"

    var struct_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &struct_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if struct_p != 0 {
        try visitor.visitSingularInt32Field(value: struct_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct structValue: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".structValue"

    var structValue: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &structValue)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if structValue != 0 {
        try visitor.visitSingularInt32Field(value: structValue, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct subDecoder: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".subDecoder"

    var subDecoder: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &subDecoder)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if subDecoder != 0 {
        try visitor.visitSingularInt32Field(value: subDecoder, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct subscriptMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".subscript"

    var subscript_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &subscript_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if subscript_p != 0 {
        try visitor.visitSingularInt32Field(value: subscript_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct swift: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".swift"

    var swift: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &swift)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if swift != 0 {
        try visitor.visitSingularInt32Field(value: swift, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct SwiftProtobufMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".SwiftProtobuf"

    var swiftProtobuf: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &swiftProtobuf)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if swiftProtobuf != 0 {
        try visitor.visitSingularInt32Field(value: swiftProtobuf, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct syntax: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".syntax"

    var syntax: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &syntax)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if syntax != 0 {
        try visitor.visitSingularInt32Field(value: syntax, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct T: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".T"

    var t: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &t)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if t != 0 {
        try visitor.visitSingularInt32Field(value: t, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct tag: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".tag"

    var tag: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &tag)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if tag != 0 {
        try visitor.visitSingularInt32Field(value: tag, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct target: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".target"

    var target: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &target)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if target != 0 {
        try visitor.visitSingularInt32Field(value: target, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct terminator: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".terminator"

    var terminator: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &terminator)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if terminator != 0 {
        try visitor.visitSingularInt32Field(value: terminator, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct testDecoder: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".testDecoder"

    var testDecoder: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &testDecoder)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if testDecoder != 0 {
        try visitor.visitSingularInt32Field(value: testDecoder, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct text: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".text"

    var text: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &text)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if text != 0 {
        try visitor.visitSingularInt32Field(value: text, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct textDecoder: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".textDecoder"

    var textDecoder: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &textDecoder)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if textDecoder != 0 {
        try visitor.visitSingularInt32Field(value: textDecoder, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct TextFormatDecoder: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".TextFormatDecoder"

    var textFormatDecoder: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &textFormatDecoder)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if textFormatDecoder != 0 {
        try visitor.visitSingularInt32Field(value: textFormatDecoder, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct TextFormatEncoder: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".TextFormatEncoder"

    var textFormatEncoder: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &textFormatEncoder)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if textFormatEncoder != 0 {
        try visitor.visitSingularInt32Field(value: textFormatEncoder, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct TextFormatEncodingVisitor: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".TextFormatEncodingVisitor"

    var textFormatEncodingVisitor: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &textFormatEncodingVisitor)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if textFormatEncodingVisitor != 0 {
        try visitor.visitSingularInt32Field(value: textFormatEncodingVisitor, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct TextFormatScanner: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".TextFormatScanner"

    var textFormatScanner: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &textFormatScanner)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if textFormatScanner != 0 {
        try visitor.visitSingularInt32Field(value: textFormatScanner, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct textFormatString: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".textFormatString"

    var textFormatString: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &textFormatString)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if textFormatString != 0 {
        try visitor.visitSingularInt32Field(value: textFormatString, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct that: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".that"

    var that: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &that)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if that != 0 {
        try visitor.visitSingularInt32Field(value: that, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct they: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".they"

    var they: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &they)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if they != 0 {
        try visitor.visitSingularInt32Field(value: they, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct throwsMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".throws"

    var throws_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &throws_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if throws_p != 0 {
        try visitor.visitSingularInt32Field(value: throws_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct timeInterval: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".timeInterval"

    var timeInterval: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &timeInterval)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if timeInterval != 0 {
        try visitor.visitSingularInt32Field(value: timeInterval, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct timeIntervalSince1970: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".timeIntervalSince1970"

    var timeIntervalSince1970: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &timeIntervalSince1970)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if timeIntervalSince1970 != 0 {
        try visitor.visitSingularInt32Field(value: timeIntervalSince1970, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct timeIntervalSinceReferenceDate: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".timeIntervalSinceReferenceDate"

    var timeIntervalSinceReferenceDate: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &timeIntervalSinceReferenceDate)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if timeIntervalSinceReferenceDate != 0 {
        try visitor.visitSingularInt32Field(value: timeIntervalSinceReferenceDate, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct timeOfDayFromSecondsSince1970: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".timeOfDayFromSecondsSince1970"

    var timeOfDayFromSecondsSince1970: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &timeOfDayFromSecondsSince1970)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if timeOfDayFromSecondsSince1970 != 0 {
        try visitor.visitSingularInt32Field(value: timeOfDayFromSecondsSince1970, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Timestamp: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Timestamp"

    var timestamp: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &timestamp)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if timestamp != 0 {
        try visitor.visitSingularInt32Field(value: timestamp, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct toJsonFieldName: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".toJsonFieldName"

    var toJsonFieldName: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &toJsonFieldName)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if toJsonFieldName != 0 {
        try visitor.visitSingularInt32Field(value: toJsonFieldName, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct total: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".total"

    var total: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &total)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if total != 0 {
        try visitor.visitSingularInt32Field(value: total, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct traverseMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".traverse"

    var traverse: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &traverse)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if traverse != 0 {
        try visitor.visitSingularInt32Field(value: traverse, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct trueMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".true"

    var true_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &true_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if true_p != 0 {
        try visitor.visitSingularInt32Field(value: true_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct tryMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".try"

    var try_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &try_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if try_p != 0 {
        try visitor.visitSingularInt32Field(value: try_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct TypeMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".Type"

    var type: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &type)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if type != 0 {
        try visitor.visitSingularInt32Field(value: type, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct typealiasMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".typealias"

    var typealias_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &typealias_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if typealias_p != 0 {
        try visitor.visitSingularInt32Field(value: typealias_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct typeName: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".typeName"

    var typeName: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &typeName)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if typeName != 0 {
        try visitor.visitSingularInt32Field(value: typeName, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct typePrefix: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".typePrefix"

    var typePrefix: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &typePrefix)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if typePrefix != 0 {
        try visitor.visitSingularInt32Field(value: typePrefix, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct typeRegistry: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".typeRegistry"

    var typeRegistry: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &typeRegistry)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if typeRegistry != 0 {
        try visitor.visitSingularInt32Field(value: typeRegistry, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct typeStart: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".typeStart"

    var typeStart: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &typeStart)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if typeStart != 0 {
        try visitor.visitSingularInt32Field(value: typeStart, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct typeUnknown: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".typeUnknown"

    var typeUnknown: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &typeUnknown)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if typeUnknown != 0 {
        try visitor.visitSingularInt32Field(value: typeUnknown, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct typeURL: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".typeURL"

    var typeURL: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &typeURL)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if typeURL != 0 {
        try visitor.visitSingularInt32Field(value: typeURL, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UInt32Message: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UInt32"

    var uint32: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &uint32)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if uint32 != 0 {
        try visitor.visitSingularInt32Field(value: uint32, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UInt32Value: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UInt32Value"

    var uint32Value: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &uint32Value)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if uint32Value != 0 {
        try visitor.visitSingularInt32Field(value: uint32Value, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UInt64Message: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UInt64"

    var uint64: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &uint64)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if uint64 != 0 {
        try visitor.visitSingularInt32Field(value: uint64, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UInt64Value: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UInt64Value"

    var uint64Value: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &uint64Value)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if uint64Value != 0 {
        try visitor.visitSingularInt32Field(value: uint64Value, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UInt8: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UInt8"

    var uint8: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &uint8)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if uint8 != 0 {
        try visitor.visitSingularInt32Field(value: uint8, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UnicodeScalar: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UnicodeScalar"

    var unicodeScalar: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unicodeScalar)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unicodeScalar != 0 {
        try visitor.visitSingularInt32Field(value: unicodeScalar, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct unicodeScalarLiteral: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".unicodeScalarLiteral"

    var unicodeScalarLiteral: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unicodeScalarLiteral)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unicodeScalarLiteral != 0 {
        try visitor.visitSingularInt32Field(value: unicodeScalarLiteral, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UnicodeScalarLiteralType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UnicodeScalarLiteralType"

    var unicodeScalarLiteralType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unicodeScalarLiteralType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unicodeScalarLiteralType != 0 {
        try visitor.visitSingularInt32Field(value: unicodeScalarLiteralType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct unicodeScalars: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".unicodeScalars"

    var unicodeScalars: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unicodeScalars)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unicodeScalars != 0 {
        try visitor.visitSingularInt32Field(value: unicodeScalars, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UnicodeScalarView: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UnicodeScalarView"

    var unicodeScalarView: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unicodeScalarView)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unicodeScalarView != 0 {
        try visitor.visitSingularInt32Field(value: unicodeScalarView, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct union: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".union"

    var union: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &union)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if union != 0 {
        try visitor.visitSingularInt32Field(value: union, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct uniqueStorage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".uniqueStorage"

    var uniqueStorage: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &uniqueStorage)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if uniqueStorage != 0 {
        try visitor.visitSingularInt32Field(value: uniqueStorage, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct unknown: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".unknown"

    var unknown: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unknown)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unknown != 0 {
        try visitor.visitSingularInt32Field(value: unknown, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct unknownData: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".unknownData"

    var unknownData: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unknownData)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unknownData != 0 {
        try visitor.visitSingularInt32Field(value: unknownData, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct unknownFieldsMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".unknownFields"

    var unknownFields_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unknownFields_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unknownFields_p != 0 {
        try visitor.visitSingularInt32Field(value: unknownFields_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UnknownStorage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UnknownStorage"

    var unknownStorage: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unknownStorage)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unknownStorage != 0 {
        try visitor.visitSingularInt32Field(value: unknownStorage, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct unpack: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".unpack"

    var unpack: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unpack)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unpack != 0 {
        try visitor.visitSingularInt32Field(value: unpack, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct unpackTo: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".unpackTo"

    var unpackTo: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unpackTo)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unpackTo != 0 {
        try visitor.visitSingularInt32Field(value: unpackTo, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UnsafeBufferPointer: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UnsafeBufferPointer"

    var unsafeBufferPointer: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unsafeBufferPointer)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unsafeBufferPointer != 0 {
        try visitor.visitSingularInt32Field(value: unsafeBufferPointer, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UnsafeMutablePointer: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UnsafeMutablePointer"

    var unsafeMutablePointer: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unsafeMutablePointer)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unsafeMutablePointer != 0 {
        try visitor.visitSingularInt32Field(value: unsafeMutablePointer, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UnsafeMutableRawBufferPointer: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UnsafeMutableRawBufferPointer"

    var unsafeMutableRawBufferPointer: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unsafeMutableRawBufferPointer)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unsafeMutableRawBufferPointer != 0 {
        try visitor.visitSingularInt32Field(value: unsafeMutableRawBufferPointer, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UnsafePointer: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UnsafePointer"

    var unsafePointer: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &unsafePointer)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if unsafePointer != 0 {
        try visitor.visitSingularInt32Field(value: unsafePointer, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct url: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".url"

    var url: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &url)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if url != 0 {
        try visitor.visitSingularInt32Field(value: url, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct used: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".used"

    var used: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &used)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if used != 0 {
        try visitor.visitSingularInt32Field(value: used, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct utf8: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".utf8"

    var utf8: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &utf8)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if utf8 != 0 {
        try visitor.visitSingularInt32Field(value: utf8, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct utf8Buffer: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".utf8Buffer"

    var utf8Buffer: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &utf8Buffer)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if utf8Buffer != 0 {
        try visitor.visitSingularInt32Field(value: utf8Buffer, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct utf8Codec: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".utf8Codec"

    var utf8Codec: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &utf8Codec)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if utf8Codec != 0 {
        try visitor.visitSingularInt32Field(value: utf8Codec, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct utf8Pointer: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".utf8Pointer"

    var utf8Pointer: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &utf8Pointer)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if utf8Pointer != 0 {
        try visitor.visitSingularInt32Field(value: utf8Pointer, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct utf8ToDouble: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".utf8ToDouble"

    var utf8ToDouble: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &utf8ToDouble)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if utf8ToDouble != 0 {
        try visitor.visitSingularInt32Field(value: utf8ToDouble, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct utf8ToString: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".utf8ToString"

    var utf8ToString: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &utf8ToString)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if utf8ToString != 0 {
        try visitor.visitSingularInt32Field(value: utf8ToString, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UTF8View: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".UTF8View"

    var utf8View: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &utf8View)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if utf8View != 0 {
        try visitor.visitSingularInt32Field(value: utf8View, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct v: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".v"

    var v: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &v)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if v != 0 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct value: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".value"

    var value: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &value)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if value != 0 {
        try visitor.visitSingularInt32Field(value: value, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct valueField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".valueField"

    var valueField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &valueField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if valueField != 0 {
        try visitor.visitSingularInt32Field(value: valueField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct values: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".values"

    var values: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &values)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if values != 0 {
        try visitor.visitSingularInt32Field(value: values, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ValueType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".ValueType"

    var valueType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &valueType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if valueType != 0 {
        try visitor.visitSingularInt32Field(value: valueType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct varMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".var"

    var var_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &var_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if var_p != 0 {
        try visitor.visitSingularInt32Field(value: var_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct version: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".version"

    var version: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &version)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if version != 0 {
        try visitor.visitSingularInt32Field(value: version, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct versionString: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".versionString"

    var versionString: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &versionString)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if versionString != 0 {
        try visitor.visitSingularInt32Field(value: versionString, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitExtensionFields: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitExtensionFields"

    var visitExtensionFields: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitExtensionFields)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitExtensionFields != 0 {
        try visitor.visitSingularInt32Field(value: visitExtensionFields, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitMapField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitMapField"

    var visitMapField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitMapField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitMapField != 0 {
        try visitor.visitSingularInt32Field(value: visitMapField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitor: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitor"

    var visitor_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitor_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitor_p != 0 {
        try visitor.visitSingularInt32Field(value: visitor_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPacked: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPacked"

    var visitPacked: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPacked)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPacked != 0 {
        try visitor.visitSingularInt32Field(value: visitPacked, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedBoolField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedBoolField"

    var visitPackedBoolField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedBoolField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedBoolField != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedBoolField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedDoubleField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedDoubleField"

    var visitPackedDoubleField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedDoubleField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedDoubleField != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedDoubleField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedEnumField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedEnumField"

    var visitPackedEnumField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedEnumField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedEnumField != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedEnumField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedFixed32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedFixed32Field"

    var visitPackedFixed32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedFixed32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedFixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedFixed32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedFixed64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedFixed64Field"

    var visitPackedFixed64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedFixed64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedFixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedFixed64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedFloatField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedFloatField"

    var visitPackedFloatField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedFloatField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedFloatField != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedFloatField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedInt32Field"

    var visitPackedInt32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedInt32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedInt32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedInt32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedInt64Field"

    var visitPackedInt64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedInt64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedInt64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedInt64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedSFixed32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedSFixed32Field"

    var visitPackedSfixed32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedSfixed32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedSfixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedSfixed32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedSFixed64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedSFixed64Field"

    var visitPackedSfixed64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedSfixed64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedSfixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedSfixed64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedSInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedSInt32Field"

    var visitPackedSint32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedSint32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedSint32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedSint32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedSInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedSInt64Field"

    var visitPackedSint64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedSint64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedSint64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedSint64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedUInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedUInt32Field"

    var visitPackedUint32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedUint32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedUint32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedUint32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitPackedUInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedUInt64Field"

    var visitPackedUint64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitPackedUint64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitPackedUint64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitPackedUint64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeated: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeated"

    var visitRepeated: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeated)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeated != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeated, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedBoolField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedBoolField"

    var visitRepeatedBoolField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedBoolField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedBoolField != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedBoolField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedBytesField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedBytesField"

    var visitRepeatedBytesField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedBytesField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedBytesField != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedBytesField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedDoubleField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedDoubleField"

    var visitRepeatedDoubleField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedDoubleField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedDoubleField != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedDoubleField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedEnumField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedEnumField"

    var visitRepeatedEnumField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedEnumField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedEnumField != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedEnumField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedFixed32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedFixed32Field"

    var visitRepeatedFixed32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedFixed32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedFixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedFixed32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedFixed64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedFixed64Field"

    var visitRepeatedFixed64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedFixed64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedFixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedFixed64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedFloatField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedFloatField"

    var visitRepeatedFloatField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedFloatField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedFloatField != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedFloatField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedGroupField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedGroupField"

    var visitRepeatedGroupField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedGroupField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedGroupField != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedGroupField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedInt32Field"

    var visitRepeatedInt32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedInt32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedInt32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedInt32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedInt64Field"

    var visitRepeatedInt64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedInt64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedInt64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedInt64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedMessageField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedMessageField"

    var visitRepeatedMessageField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedMessageField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedMessageField != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedMessageField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedSFixed32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedSFixed32Field"

    var visitRepeatedSfixed32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedSfixed32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedSfixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedSfixed32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedSFixed64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedSFixed64Field"

    var visitRepeatedSfixed64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedSfixed64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedSfixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedSfixed64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedSInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedSInt32Field"

    var visitRepeatedSint32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedSint32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedSint32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedSint32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedSInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedSInt64Field"

    var visitRepeatedSint64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedSint64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedSint64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedSint64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedStringField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedStringField"

    var visitRepeatedStringField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedStringField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedStringField != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedStringField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedUInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedUInt32Field"

    var visitRepeatedUint32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedUint32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedUint32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedUint32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitRepeatedUInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedUInt64Field"

    var visitRepeatedUint64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitRepeatedUint64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitRepeatedUint64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitRepeatedUint64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingular: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingular"

    var visitSingular: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingular)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingular != 0 {
        try visitor.visitSingularInt32Field(value: visitSingular, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularBoolField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularBoolField"

    var visitSingularBoolField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularBoolField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularBoolField != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularBoolField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularBytesField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularBytesField"

    var visitSingularBytesField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularBytesField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularBytesField != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularBytesField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularDoubleField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularDoubleField"

    var visitSingularDoubleField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularDoubleField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularDoubleField != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularDoubleField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularEnumField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularEnumField"

    var visitSingularEnumField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularEnumField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularEnumField != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularEnumField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularFixed32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularFixed32Field"

    var visitSingularFixed32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularFixed32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularFixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularFixed32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularFixed64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularFixed64Field"

    var visitSingularFixed64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularFixed64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularFixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularFixed64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularFloatField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularFloatField"

    var visitSingularFloatField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularFloatField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularFloatField != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularFloatField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularGroupField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularGroupField"

    var visitSingularGroupField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularGroupField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularGroupField != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularGroupField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularInt32Field"

    var visitSingularInt32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularInt32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularInt32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularInt32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularInt64Field"

    var visitSingularInt64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularInt64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularInt64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularInt64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularMessageField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularMessageField"

    var visitSingularMessageField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularMessageField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularMessageField != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularMessageField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularSFixed32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularSFixed32Field"

    var visitSingularSfixed32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularSfixed32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularSfixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularSfixed32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularSFixed64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularSFixed64Field"

    var visitSingularSfixed64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularSfixed64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularSfixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularSfixed64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularSInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularSInt32Field"

    var visitSingularSint32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularSint32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularSint32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularSint32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularSInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularSInt64Field"

    var visitSingularSint64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularSint64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularSint64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularSint64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularStringField: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularStringField"

    var visitSingularStringField: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularStringField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularStringField != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularStringField, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularUInt32Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularUInt32Field"

    var visitSingularUint32Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularUint32Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularUint32Field != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularUint32Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitSingularUInt64Field: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularUInt64Field"

    var visitSingularUint64Field: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitSingularUint64Field)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitSingularUint64Field != 0 {
        try visitor.visitSingularInt32Field(value: visitSingularUint64Field, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct visitUnknown: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".visitUnknown"

    var visitUnknown: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &visitUnknown)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if visitUnknown != 0 {
        try visitor.visitSingularInt32Field(value: visitUnknown, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct whereMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".where"

    var where_p: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &where_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if where_p != 0 {
        try visitor.visitSingularInt32Field(value: where_p, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct wireFormat: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".wireFormat"

    var wireFormat: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &wireFormat)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if wireFormat != 0 {
        try visitor.visitSingularInt32Field(value: wireFormat, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct with: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".with"

    var with: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &with)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if with != 0 {
        try visitor.visitSingularInt32Field(value: with, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct WrappedType: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".WrappedType"

    var wrappedType: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &wrappedType)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if wrappedType != 0 {
        try visitor.visitSingularInt32Field(value: wrappedType, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct wrapped_vsnprintf: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".wrapped_vsnprintf"

    var wrappedVsnprintf: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &wrappedVsnprintf)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if wrappedVsnprintf != 0 {
        try visitor.visitSingularInt32Field(value: wrappedVsnprintf, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct yday: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".yday"

    var yday: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &yday)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if yday != 0 {
        try visitor.visitSingularInt32Field(value: yday, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct YY: SwiftProtobuf.Message {
    static let protoMessageName: String = ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageName + ".YY"

    var yy: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &yy)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if yy != 0 {
        try visitor.visitSingularInt32Field(value: yy, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protobuf_unittest"

extension ProtobufUnittest_GeneratedSwiftReservedMessages: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.a: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.a) -> Bool {
    if a != other.a {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.adjusted: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "adjusted"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.adjusted) -> Bool {
    if adjusted != other.adjusted {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.any: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "any"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.any) -> Bool {
    if any != other.any {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.AnyExtensionField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AnyExtensionField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.AnyExtensionField) -> Bool {
    if anyExtensionField != other.anyExtensionField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.AnyMessageStorage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AnyMessageStorage"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.AnyMessageStorage) -> Bool {
    if anyMessageStorage != other.anyMessageStorage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Api: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Api"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Api) -> Bool {
    if api != other.api {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.appended: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appended"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.appended) -> Bool {
    if appended != other.appended {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.appendUIntHex: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appendUIntHex"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.appendUIntHex) -> Bool {
    if appendUintHex != other.appendUintHex {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.appendUnknown: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appendUnknown"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.appendUnknown) -> Bool {
    if appendUnknown != other.appendUnknown {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.apple: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "apple"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.apple) -> Bool {
    if apple != other.apple {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.are: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "are"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.are) -> Bool {
    if are != other.are {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.areAllInitialized: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "areAllInitialized"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.areAllInitialized) -> Bool {
    if areAllInitialized != other.areAllInitialized {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.arrayLiteral: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "arrayLiteral"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.arrayLiteral) -> Bool {
    if arrayLiteral != other.arrayLiteral {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.arraySeparator: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "arraySeparator"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.arraySeparator) -> Bool {
    if arraySeparator != other.arraySeparator {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.asMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "as"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.asMessage) -> Bool {
    if as_p != other.as_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.asciiOpenCurlyBracket: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asciiOpenCurlyBracket"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.asciiOpenCurlyBracket) -> Bool {
    if asciiOpenCurlyBracket != other.asciiOpenCurlyBracket {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.asciiZero: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asciiZero"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.asciiZero) -> Bool {
    if asciiZero != other.asciiZero {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.asJSONObject: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asJSONObject"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.asJSONObject) -> Bool {
    if asJsonobject != other.asJsonobject {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.available: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "available"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.available) -> Bool {
    if available != other.available {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.b: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "b"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.b) -> Bool {
    if b != other.b {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.base64String: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base64String"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.base64String) -> Bool {
    if base64String != other.base64String {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.BaseType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BaseType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.BaseType) -> Bool {
    if baseType != other.baseType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.because: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "because"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.because) -> Bool {
    if because != other.because {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.binary: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "binary"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.binary) -> Bool {
    if binary != other.binary {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.BinaryDecoder: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BinaryDecoder"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.BinaryDecoder) -> Bool {
    if binaryDecoder != other.binaryDecoder {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.BinaryEncoder: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BinaryEncoder"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.BinaryEncoder) -> Bool {
    if binaryEncoder != other.binaryEncoder {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.BinaryEncodingSizeVisitor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BinaryEncodingSizeVisitor"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.BinaryEncodingSizeVisitor) -> Bool {
    if binaryEncodingSizeVisitor != other.binaryEncodingSizeVisitor {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.BinaryEncodingVisitor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BinaryEncodingVisitor"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.BinaryEncodingVisitor) -> Bool {
    if binaryEncodingVisitor != other.binaryEncodingVisitor {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.bits: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bits"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.bits) -> Bool {
    if bits != other.bits {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.body: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "body"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.body) -> Bool {
    if body != other.body {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.bodySize: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bodySize"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.bodySize) -> Bool {
    if bodySize != other.bodySize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.BoolMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Bool"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.BoolMessage) -> Bool {
    if bool != other.bool {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.booleanLiteral: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "booleanLiteral"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.booleanLiteral) -> Bool {
    if booleanLiteral != other.booleanLiteral {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.BooleanLiteralType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BooleanLiteralType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.BooleanLiteralType) -> Bool {
    if booleanLiteralType != other.booleanLiteralType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.boolValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "boolValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.boolValue) -> Bool {
    if boolValue != other.boolValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.buffer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "buffer"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.buffer) -> Bool {
    if buffer != other.buffer {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.buildTypeURL: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "buildTypeURL"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.buildTypeURL) -> Bool {
    if buildTypeURL != other.buildTypeURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.by: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "by"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.by) -> Bool {
    if by != other.by {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.bytes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bytes"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.bytes) -> Bool {
    if bytes != other.bytes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.BytesValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BytesValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.BytesValue) -> Bool {
    if bytesValue != other.bytesValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.c: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "c"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.c) -> Bool {
    if c != other.c {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.capitalizeNext: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "capitalizeNext"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.capitalizeNext) -> Bool {
    if capitalizeNext != other.capitalizeNext {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.cardinality: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cardinality"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.cardinality) -> Bool {
    if cardinality != other.cardinality {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Character: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Character"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Character) -> Bool {
    if character != other.character {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.characters: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "characters"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.characters) -> Bool {
    if characters != other.characters {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.chars: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chars"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.chars) -> Bool {
    if chars != other.chars {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.clearExtensionValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clearExtensionValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.clearExtensionValue) -> Bool {
    if clearExtensionValue_p != other.clearExtensionValue_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.clearSourceContext: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clearSourceContext"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.clearSourceContext) -> Bool {
    if clearSourceContext_p != other.clearSourceContext_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.clearValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clearValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.clearValue) -> Bool {
    if clearValue_p != other.clearValue_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.com: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "com"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.com) -> Bool {
    if com != other.com {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.consume: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "consume"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.consume) -> Bool {
    if consume != other.consume {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.contentJSON: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contentJSON"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.contentJSON) -> Bool {
    if contentJson != other.contentJson {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.contentsOf: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contentsOf"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.contentsOf) -> Bool {
    if contentsOf != other.contentsOf {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.count: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.count) -> Bool {
    if count != other.count {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.customCodable: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "customCodable"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.customCodable) -> Bool {
    if customCodable != other.customCodable {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.d: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "d"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.d) -> Bool {
    if d != other.d {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.DataMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Data"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.DataMessage) -> Bool {
    if data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.dataResult: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataResult"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.dataResult) -> Bool {
    if dataResult != other.dataResult {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.dataSize: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataSize"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.dataSize) -> Bool {
    if dataSize != other.dataSize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.date: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.date) -> Bool {
    if date != other.date {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.daySec: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "daySec"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.daySec) -> Bool {
    if daySec != other.daySec {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.daysSinceEpoch: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "daysSinceEpoch"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.daysSinceEpoch) -> Bool {
    if daysSinceEpoch != other.daysSinceEpoch {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.DD: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "DD"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.DD) -> Bool {
    if dd != other.dd {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.debugDescriptionMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "debugDescription"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.debugDescriptionMessage) -> Bool {
    if debugDescription_p != other.debugDescription_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeBytes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeBytes"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeBytes) -> Bool {
    if decodeBytes != other.decodeBytes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decoded: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decoded"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decoded) -> Bool {
    if decoded != other.decoded {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodedFromJSONNull: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodedFromJSONNull"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodedFromJSONNull) -> Bool {
    if decodedFromJsonnull != other.decodedFromJsonnull {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeExtensionField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeExtensionField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeExtensionField) -> Bool {
    if decodeExtensionField != other.decodeExtensionField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeJSON: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeJSON"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeJSON) -> Bool {
    if decodeJson != other.decodeJson {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeMapField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeMapField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeMapField) -> Bool {
    if decodeMapField != other.decodeMapField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeMessageMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeMessage"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeMessageMessage) -> Bool {
    if decodeMessage != other.decodeMessage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decoder: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decoder"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decoder) -> Bool {
    if decoder_p != other.decoder_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeated: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeated"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeated) -> Bool {
    if decodeRepeated != other.decodeRepeated {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedBoolField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedBoolField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedBoolField) -> Bool {
    if decodeRepeatedBoolField != other.decodeRepeatedBoolField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedBytesField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedBytesField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedBytesField) -> Bool {
    if decodeRepeatedBytesField != other.decodeRepeatedBytesField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedDoubleField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedDoubleField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedDoubleField) -> Bool {
    if decodeRepeatedDoubleField != other.decodeRepeatedDoubleField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedEnumField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedEnumField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedEnumField) -> Bool {
    if decodeRepeatedEnumField != other.decodeRepeatedEnumField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedFixed32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedFixed32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedFixed32Field) -> Bool {
    if decodeRepeatedFixed32Field != other.decodeRepeatedFixed32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedFixed64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedFixed64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedFixed64Field) -> Bool {
    if decodeRepeatedFixed64Field != other.decodeRepeatedFixed64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedFloatField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedFloatField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedFloatField) -> Bool {
    if decodeRepeatedFloatField != other.decodeRepeatedFloatField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedGroupField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedGroupField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedGroupField) -> Bool {
    if decodeRepeatedGroupField != other.decodeRepeatedGroupField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedInt32Field) -> Bool {
    if decodeRepeatedInt32Field != other.decodeRepeatedInt32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedInt64Field) -> Bool {
    if decodeRepeatedInt64Field != other.decodeRepeatedInt64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedMessageField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedMessageField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedMessageField) -> Bool {
    if decodeRepeatedMessageField != other.decodeRepeatedMessageField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedSFixed32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedSFixed32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedSFixed32Field) -> Bool {
    if decodeRepeatedSfixed32Field != other.decodeRepeatedSfixed32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedSFixed64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedSFixed64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedSFixed64Field) -> Bool {
    if decodeRepeatedSfixed64Field != other.decodeRepeatedSfixed64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedSInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedSInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedSInt32Field) -> Bool {
    if decodeRepeatedSint32Field != other.decodeRepeatedSint32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedSInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedSInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedSInt64Field) -> Bool {
    if decodeRepeatedSint64Field != other.decodeRepeatedSint64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedStringField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedStringField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedStringField) -> Bool {
    if decodeRepeatedStringField != other.decodeRepeatedStringField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedUInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedUInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedUInt32Field) -> Bool {
    if decodeRepeatedUint32Field != other.decodeRepeatedUint32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedUInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeRepeatedUInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeRepeatedUInt64Field) -> Bool {
    if decodeRepeatedUint64Field != other.decodeRepeatedUint64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingular: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingular"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingular) -> Bool {
    if decodeSingular != other.decodeSingular {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularBoolField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularBoolField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularBoolField) -> Bool {
    if decodeSingularBoolField != other.decodeSingularBoolField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularBytesField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularBytesField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularBytesField) -> Bool {
    if decodeSingularBytesField != other.decodeSingularBytesField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularDoubleField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularDoubleField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularDoubleField) -> Bool {
    if decodeSingularDoubleField != other.decodeSingularDoubleField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularEnumField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularEnumField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularEnumField) -> Bool {
    if decodeSingularEnumField != other.decodeSingularEnumField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularFixed32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularFixed32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularFixed32Field) -> Bool {
    if decodeSingularFixed32Field != other.decodeSingularFixed32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularFixed64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularFixed64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularFixed64Field) -> Bool {
    if decodeSingularFixed64Field != other.decodeSingularFixed64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularFloatField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularFloatField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularFloatField) -> Bool {
    if decodeSingularFloatField != other.decodeSingularFloatField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularGroupField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularGroupField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularGroupField) -> Bool {
    if decodeSingularGroupField != other.decodeSingularGroupField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularInt32Field) -> Bool {
    if decodeSingularInt32Field != other.decodeSingularInt32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularInt64Field) -> Bool {
    if decodeSingularInt64Field != other.decodeSingularInt64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularMessageField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularMessageField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularMessageField) -> Bool {
    if decodeSingularMessageField != other.decodeSingularMessageField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularSFixed32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularSFixed32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularSFixed32Field) -> Bool {
    if decodeSingularSfixed32Field != other.decodeSingularSfixed32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularSFixed64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularSFixed64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularSFixed64Field) -> Bool {
    if decodeSingularSfixed64Field != other.decodeSingularSfixed64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularSInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularSInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularSInt32Field) -> Bool {
    if decodeSingularSint32Field != other.decodeSingularSint32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularSInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularSInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularSInt64Field) -> Bool {
    if decodeSingularSint64Field != other.decodeSingularSint64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularStringField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularStringField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularStringField) -> Bool {
    if decodeSingularStringField != other.decodeSingularStringField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularUInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularUInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularUInt32Field) -> Bool {
    if decodeSingularUint32Field != other.decodeSingularUint32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularUInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeSingularUInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeSingularUInt64Field) -> Bool {
    if decodeSingularUint64Field != other.decodeSingularUint64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeString"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeString) -> Bool {
    if decodeString != other.decodeString {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.decodeTextFormat: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decodeTextFormat"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.decodeTextFormat) -> Bool {
    if decodeTextFormat != other.decodeTextFormat {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.defaultValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "defaultValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.defaultValue) -> Bool {
    if defaultValue != other.defaultValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.descriptionMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.descriptionMessage) -> Bool {
    if description_p != other.description_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.destination: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "destination"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.destination) -> Bool {
    if destination != other.destination {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Dictionary: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Dictionary"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Dictionary) -> Bool {
    if dictionary != other.dictionary {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.dictionaryLiteral: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dictionaryLiteral"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.dictionaryLiteral) -> Bool {
    if dictionaryLiteral != other.dictionaryLiteral {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.digit0: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "digit0"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.digit0) -> Bool {
    if digit0 != other.digit0 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.digit1: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "digit1"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.digit1) -> Bool {
    if digit1 != other.digit1 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.digitCount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "digitCount"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.digitCount) -> Bool {
    if digitCount != other.digitCount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.digits: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "digits"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.digits) -> Bool {
    if digits != other.digits {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.digitValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "digitValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.digitValue) -> Bool {
    if digitValue != other.digitValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.discardableResult: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "discardableResult"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.discardableResult) -> Bool {
    if discardableResult != other.discardableResult {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.DispatchQueue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "DispatchQueue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.DispatchQueue) -> Bool {
    if dispatchQueue != other.dispatchQueue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.div: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "div"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.div) -> Bool {
    if div != other.div {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.double: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "double"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.double) -> Bool {
    if double != other.double {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.doubleToUtf8: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "doubleToUtf8"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.doubleToUtf8) -> Bool {
    if doubleToUtf8 != other.doubleToUtf8 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.DoubleValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "DoubleValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.DoubleValue) -> Bool {
    if doubleValue != other.doubleValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Duration: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Duration"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Duration) -> Bool {
    if duration != other.duration {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.E: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "E"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.E) -> Bool {
    if e != other.e {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Element: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Element"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Element) -> Bool {
    if element != other.element {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.elements: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "elements"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.elements) -> Bool {
    if elements != other.elements {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.emitExtensionFieldName: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "emitExtensionFieldName"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.emitExtensionFieldName) -> Bool {
    if emitExtensionFieldName != other.emitExtensionFieldName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.emitFieldName: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "emitFieldName"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.emitFieldName) -> Bool {
    if emitFieldName != other.emitFieldName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.emitFieldNumber: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "emitFieldNumber"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.emitFieldNumber) -> Bool {
    if emitFieldNumber != other.emitFieldNumber {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.emitVerboseTextForm: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "emitVerboseTextForm"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.emitVerboseTextForm) -> Bool {
    if emitVerboseTextForm != other.emitVerboseTextForm {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Empty: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Empty"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Empty) -> Bool {
    if empty != other.empty {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.encoded: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoded"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.encoded) -> Bool {
    if encoded != other.encoded {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.encodedJSONString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encodedJSONString"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.encodedJSONString) -> Bool {
    if encodedJsonstring != other.encodedJsonstring {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.encodedSize: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encodedSize"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.encodedSize) -> Bool {
    if encodedSize != other.encodedSize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.encodeField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encodeField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.encodeField) -> Bool {
    if encodeField != other.encodeField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.encoder: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoder"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.encoder) -> Bool {
    if encoder != other.encoder {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.end: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "end"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.end) -> Bool {
    if end != other.end {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.endArray: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endArray"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.endArray) -> Bool {
    if endArray != other.endArray {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.endMessageField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endMessageField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.endMessageField) -> Bool {
    if endMessageField != other.endMessageField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.endObject: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endObject"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.endObject) -> Bool {
    if endObject != other.endObject {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.endRegularField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endRegularField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.endRegularField) -> Bool {
    if endRegularField != other.endRegularField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Enum: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Enum"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Enum) -> Bool {
    if enum_p != other.enum_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.enumvalue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enumvalue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.enumvalue) -> Bool {
    if enumvalue != other.enumvalue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Equatable: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Equatable"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Equatable) -> Bool {
    if equatable != other.equatable {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ext: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ext"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ext) -> Bool {
    if ext != other.ext {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.extendedGraphemeClusterLiteral: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "extendedGraphemeClusterLiteral"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.extendedGraphemeClusterLiteral) -> Bool {
    if extendedGraphemeClusterLiteral != other.extendedGraphemeClusterLiteral {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ExtendedGraphemeClusterLiteralType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ExtendedGraphemeClusterLiteralType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ExtendedGraphemeClusterLiteralType) -> Bool {
    if extendedGraphemeClusterLiteralType != other.extendedGraphemeClusterLiteralType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ExtensionFieldValueSet: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ExtensionFieldValueSet"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ExtensionFieldValueSet) -> Bool {
    if extensionFieldValueSet != other.extensionFieldValueSet {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ExtensionMap: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ExtensionMap"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ExtensionMap) -> Bool {
    if extensionMap != other.extensionMap {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.extensions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "extensions"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.extensions) -> Bool {
    if extensions != other.extensions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.extras: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "extras"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.extras) -> Bool {
    if extras != other.extras {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.f: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "f"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.f) -> Bool {
    if f != other.f {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.falseMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "false"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.falseMessage) -> Bool {
    if false_p != other.false_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.field) -> Bool {
    if field != other.field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.FieldMask: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FieldMask"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.FieldMask) -> Bool {
    if fieldMask != other.fieldMask {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fieldName: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fieldName"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fieldName) -> Bool {
    if fieldName != other.fieldName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fieldNameCount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fieldNameCount"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fieldNameCount) -> Bool {
    if fieldNameCount != other.fieldNameCount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fieldNumber: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fieldNumber"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fieldNumber) -> Bool {
    if fieldNumber_p != other.fieldNumber_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fieldNumberForProto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fieldNumberForProto"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fieldNumberForProto) -> Bool {
    if fieldNumberForProto != other.fieldNumberForProto {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fields: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fields"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fields) -> Bool {
    if fields != other.fields {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fieldSize: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fieldSize"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fieldSize) -> Bool {
    if fieldSize != other.fieldSize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.FieldTag: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FieldTag"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.FieldTag) -> Bool {
    if fieldTag != other.fieldTag {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fieldType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fieldType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fieldType) -> Bool {
    if fieldType != other.fieldType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fieldValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fieldValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fieldValue) -> Bool {
    if fieldValue != other.fieldValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fileName: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fileName"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fileName) -> Bool {
    if fileName != other.fileName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fileprivateMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fileprivate"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fileprivateMessage) -> Bool {
    if fileprivate_p != other.fileprivate_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.firstItem: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "firstItem"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.firstItem) -> Bool {
    if firstItem != other.firstItem {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.flatMap: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flatMap"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.flatMap) -> Bool {
    if flatMap != other.flatMap {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.float: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "float"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.float) -> Bool {
    if float != other.float {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.floatLiteral: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "floatLiteral"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.floatLiteral) -> Bool {
    if floatLiteral != other.floatLiteral {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.FloatLiteralType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FloatLiteralType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.FloatLiteralType) -> Bool {
    if floatLiteralType != other.floatLiteralType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.floatToUtf8: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "floatToUtf8"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.floatToUtf8) -> Bool {
    if floatToUtf8 != other.floatToUtf8 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.FloatValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FloatValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.FloatValue) -> Bool {
    if floatValue != other.floatValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.forMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "for"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.forMessage) -> Bool {
    if for_p != other.for_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.formatDuration: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "formatDuration"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.formatDuration) -> Bool {
    if formatDuration != other.formatDuration {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.formatTimestamp: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "formatTimestamp"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.formatTimestamp) -> Bool {
    if formatTimestamp != other.formatTimestamp {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.forMessageMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "forMessage"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.forMessageMessage) -> Bool {
    if forMessage != other.forMessage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.forMessageName: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "forMessageName"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.forMessageName) -> Bool {
    if forMessageName != other.forMessageName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.forReadingFrom: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "forReadingFrom"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.forReadingFrom) -> Bool {
    if forReadingFrom != other.forReadingFrom {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.forTypeURL: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "forTypeURL"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.forTypeURL) -> Bool {
    if forTypeURL != other.forTypeURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.forWritingInto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "forWritingInto"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.forWritingInto) -> Bool {
    if forWritingInto != other.forWritingInto {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.from: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.from) -> Bool {
    if from != other.from {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fromAscii2: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fromAscii2"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fromAscii2) -> Bool {
    if fromAscii2 != other.fromAscii2 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fromAscii4: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fromAscii4"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fromAscii4) -> Bool {
    if fromAscii4 != other.fromAscii4 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fromHexDigit: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fromHexDigit"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fromHexDigit) -> Bool {
    if fromHexDigit != other.fromHexDigit {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fromMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fromMessage"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fromMessage) -> Bool {
    if fromMessage != other.fromMessage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.fromURL: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fromURL"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.fromURL) -> Bool {
    if fromURL != other.fromURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.funcMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "func"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.funcMessage) -> Bool {
    if func_p != other.func_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Functions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Functions"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Functions) -> Bool {
    if functions != other.functions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.G: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "G"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.G) -> Bool {
    if g != other.g {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.generated: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "generated"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.generated) -> Bool {
    if generated != other.generated {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.get: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "get"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.get) -> Bool {
    if get != other.get {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.getExtensionValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "getExtensionValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.getExtensionValue) -> Bool {
    if getExtensionValue != other.getExtensionValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Any: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Any"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Any) -> Bool {
    if googleProtobufAny != other.googleProtobufAny {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Api: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Api"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Api) -> Bool {
    if googleProtobufApi != other.googleProtobufApi {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_BoolValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_BoolValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_BoolValue) -> Bool {
    if googleProtobufBoolValue != other.googleProtobufBoolValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_BytesValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_BytesValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_BytesValue) -> Bool {
    if googleProtobufBytesValue != other.googleProtobufBytesValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_DoubleValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_DoubleValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_DoubleValue) -> Bool {
    if googleProtobufDoubleValue != other.googleProtobufDoubleValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Duration: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Duration"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Duration) -> Bool {
    if googleProtobufDuration != other.googleProtobufDuration {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Empty: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Empty"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Empty) -> Bool {
    if googleProtobufEmpty != other.googleProtobufEmpty {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Enum: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Enum"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Enum) -> Bool {
    if googleProtobufEnum != other.googleProtobufEnum {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_EnumValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValue) -> Bool {
    if googleProtobufEnumValue != other.googleProtobufEnumValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Field) -> Bool {
    if googleProtobufField != other.googleProtobufField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_FieldMask: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_FieldMask"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_FieldMask) -> Bool {
    if googleProtobufFieldMask != other.googleProtobufFieldMask {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_FloatValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_FloatValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_FloatValue) -> Bool {
    if googleProtobufFloatValue != other.googleProtobufFloatValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Int32Value: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Int32Value"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Int32Value) -> Bool {
    if googleProtobufInt32Value != other.googleProtobufInt32Value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Int64Value: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Int64Value"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Int64Value) -> Bool {
    if googleProtobufInt64Value != other.googleProtobufInt64Value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_ListValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_ListValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_ListValue) -> Bool {
    if googleProtobufListValue != other.googleProtobufListValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Method: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Method"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Method) -> Bool {
    if googleProtobufMethod != other.googleProtobufMethod {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Mixin: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Mixin"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Mixin) -> Bool {
    if googleProtobufMixin != other.googleProtobufMixin {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_NullValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_NullValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_NullValue) -> Bool {
    if googleProtobufNullValue != other.googleProtobufNullValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Option: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Option"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Option) -> Bool {
    if googleProtobufOption != other.googleProtobufOption {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_SourceContext: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_SourceContext"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_SourceContext) -> Bool {
    if googleProtobufSourceContext != other.googleProtobufSourceContext {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_StringValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_StringValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_StringValue) -> Bool {
    if googleProtobufStringValue != other.googleProtobufStringValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Struct: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Struct"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Struct) -> Bool {
    if googleProtobufStruct != other.googleProtobufStruct {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Syntax: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Syntax"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Syntax) -> Bool {
    if googleProtobufSyntax != other.googleProtobufSyntax {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Timestamp: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Timestamp"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Timestamp) -> Bool {
    if googleProtobufTimestamp != other.googleProtobufTimestamp {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Type: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Type"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Type) -> Bool {
    if googleProtobufType != other.googleProtobufType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_UInt32Value: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_UInt32Value"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_UInt32Value) -> Bool {
    if googleProtobufUint32Value != other.googleProtobufUint32Value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_UInt64Value: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_UInt64Value"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_UInt64Value) -> Bool {
    if googleProtobufUint64Value != other.googleProtobufUint64Value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Value: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Google_Protobuf_Value"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Google_Protobuf_Value) -> Bool {
    if googleProtobufValue != other.googleProtobufValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.gregorianDateFromSecondsSince1970: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gregorianDateFromSecondsSince1970"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.gregorianDateFromSecondsSince1970) -> Bool {
    if gregorianDateFromSecondsSince1970 != other.gregorianDateFromSecondsSince1970 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.group: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "group"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.group) -> Bool {
    if group != other.group {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.h: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "h"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.h) -> Bool {
    if h != other.h {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.handleConflictingOneOf: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "handleConflictingOneOf"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.handleConflictingOneOf) -> Bool {
    if handleConflictingOneOf != other.handleConflictingOneOf {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.has: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "has"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.has) -> Bool {
    if has_p != other.has_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.hasExtensionValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hasExtensionValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.hasExtensionValue) -> Bool {
    if hasExtensionValue_p != other.hasExtensionValue_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.hash: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.hash) -> Bool {
    if hash_p != other.hash_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Hashable: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Hashable"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Hashable) -> Bool {
    if hashable_p != other.hashable_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.hashValueMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hashValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.hashValueMessage) -> Bool {
    if hashValue_p != other.hashValue_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.HashVisitor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "HashVisitor"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.HashVisitor) -> Bool {
    if hashVisitor_p != other.hashVisitor_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.hasSourceContext: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hasSourceContext"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.hasSourceContext) -> Bool {
    if hasSourceContext_p != other.hasSourceContext_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.hasValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hasValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.hasValue) -> Bool {
    if hasValue_p != other.hasValue_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.hh: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hh"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.hh) -> Bool {
    if hh != other.hh {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.hour: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hour"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.hour) -> Bool {
    if hour != other.hour {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.i: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "i"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.i) -> Bool {
    if i != other.i {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.index: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.index) -> Bool {
    if index != other.index {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.initMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "init"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.initMessage) -> Bool {
    if init_p != other.init_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.inoutMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inout"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.inoutMessage) -> Bool {
    if inout_p != other.inout_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.insert: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "insert"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.insert) -> Bool {
    if insert != other.insert {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.insertIntoSet: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "insertIntoSet"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.insertIntoSet) -> Bool {
    if insertIntoSet != other.insertIntoSet {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.IntMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Int"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.IntMessage) -> Bool {
    if int != other.int {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Int32Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Int32"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Int32Message) -> Bool {
    if int32 != other.int32 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Int32Value: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Int32Value"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Int32Value) -> Bool {
    if int32Value != other.int32Value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Int64Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Int64"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Int64Message) -> Bool {
    if int64 != other.int64 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Int64Value: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Int64Value"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Int64Value) -> Bool {
    if int64Value != other.int64Value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Int8: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Int8"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Int8) -> Bool {
    if int8 != other.int8 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.integerLiteral: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "integerLiteral"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.integerLiteral) -> Bool {
    if integerLiteral != other.integerLiteral {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.IntegerLiteralType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "IntegerLiteralType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.IntegerLiteralType) -> Bool {
    if integerLiteralType != other.integerLiteralType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.intern: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "intern"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.intern) -> Bool {
    if intern != other.intern {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.internalMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "internal"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.internalMessage) -> Bool {
    if internal_p != other.internal_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.InternalState: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "InternalState"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.InternalState) -> Bool {
    if internalState != other.internalState {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.isA: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isA"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.isA) -> Bool {
    if isA != other.isA {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.isEqualMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isEqual"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.isEqualMessage) -> Bool {
    if isEqual != other.isEqual {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.isEqualTo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isEqualTo"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.isEqualTo) -> Bool {
    if isEqualTo != other.isEqualTo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.isInitialized: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isInitialized"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.isInitialized) -> Bool {
    if isInitialized_p != other.isInitialized_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.it: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "it"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.it) -> Bool {
    if it != other.it {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.i_2166136261: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "i_2166136261"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.i_2166136261) -> Bool {
    if i2166136261 != other.i2166136261 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.json: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "json"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.json) -> Bool {
    if json != other.json {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.JSONDecoder: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "JSONDecoder"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.JSONDecoder) -> Bool {
    if jsondecoder != other.jsondecoder {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.jsonEncoder: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jsonEncoder"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.jsonEncoder) -> Bool {
    if jsonEncoder != other.jsonEncoder {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.JSONEncodingVisitor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "JSONEncodingVisitor"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.JSONEncodingVisitor) -> Bool {
    if jsonencodingVisitor != other.jsonencodingVisitor {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.JSONMapEncodingVisitor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "JSONMapEncodingVisitor"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.JSONMapEncodingVisitor) -> Bool {
    if jsonmapEncodingVisitor != other.jsonmapEncodingVisitor {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.jsonName: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jsonName"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.jsonName) -> Bool {
    if jsonName != other.jsonName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.jsonPath: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jsonPath"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.jsonPath) -> Bool {
    if jsonPath != other.jsonPath {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.jsonPaths: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jsonPaths"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.jsonPaths) -> Bool {
    if jsonPaths != other.jsonPaths {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.JSONScanner: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "JSONScanner"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.JSONScanner) -> Bool {
    if jsonscanner != other.jsonscanner {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.jsonString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jsonString"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.jsonString) -> Bool {
    if jsonString != other.jsonString {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.jsonText: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jsonText"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.jsonText) -> Bool {
    if jsonText != other.jsonText {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.JSONToProto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "JSONToProto"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.JSONToProto) -> Bool {
    if jsontoProto != other.jsontoProto {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.jsonUTF8Data: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jsonUTF8Data"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.jsonUTF8Data) -> Bool {
    if jsonUtf8Data != other.jsonUtf8Data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.julianDayNumberFromSecondsSince1970: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "julianDayNumberFromSecondsSince1970"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.julianDayNumberFromSecondsSince1970) -> Bool {
    if julianDayNumberFromSecondsSince1970 != other.julianDayNumberFromSecondsSince1970 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.k: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "k"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.k) -> Bool {
    if k != other.k {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Key: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Key"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Key) -> Bool {
    if key != other.key {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.keyField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keyField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.keyField) -> Bool {
    if keyField != other.keyField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.KeyType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "KeyType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.KeyType) -> Bool {
    if keyType != other.keyType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.kind: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.kind) -> Bool {
    if kind != other.kind {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.knownTypes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "knownTypes"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.knownTypes) -> Bool {
    if knownTypes != other.knownTypes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.l: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "l"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.l) -> Bool {
    if l != other.l {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.label: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.label) -> Bool {
    if label != other.label {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.length: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "length"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.length) -> Bool {
    if length != other.length {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.letMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "let"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.letMessage) -> Bool {
    if let_p != other.let_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.lhs: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lhs"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.lhs) -> Bool {
    if lhs != other.lhs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.listOfMessages: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "listOfMessages"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.listOfMessages) -> Bool {
    if listOfMessages != other.listOfMessages {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.listValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "listValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.listValue) -> Bool {
    if listValue != other.listValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.littleEndian: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "littleEndian"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.littleEndian) -> Bool {
    if littleEndian != other.littleEndian {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.littleEndianBytes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "littleEndianBytes"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.littleEndianBytes) -> Bool {
    if littleEndianBytes != other.littleEndianBytes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.M: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "M"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.M) -> Bool {
    if m != other.m {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.major: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "major"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.major) -> Bool {
    if major != other.major {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.makeIterator: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "makeIterator"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.makeIterator) -> Bool {
    if makeIterator != other.makeIterator {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.mapHash: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mapHash"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.mapHash) -> Bool {
    if mapHash != other.mapHash {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.MapKeyType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MapKeyType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.MapKeyType) -> Bool {
    if mapKeyType != other.mapKeyType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.mapNameResolver: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mapNameResolver"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.mapNameResolver) -> Bool {
    if mapNameResolver != other.mapNameResolver {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.mapToMessages: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mapToMessages"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.mapToMessages) -> Bool {
    if mapToMessages != other.mapToMessages {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.MapValueType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MapValueType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.MapValueType) -> Bool {
    if mapValueType != other.mapValueType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.mapVisitor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mapVisitor"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.mapVisitor) -> Bool {
    if mapVisitor != other.mapVisitor {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.mdayStart: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mdayStart"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.mdayStart) -> Bool {
    if mdayStart != other.mdayStart {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.members: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "members"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.members) -> Bool {
    if members != other.members {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.merge: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "merge"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.merge) -> Bool {
    if merge != other.merge {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.message) -> Bool {
    if message != other.message {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.MessageExtension: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MessageExtension"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.MessageExtension) -> Bool {
    if messageExtension != other.messageExtension {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.MessageExtensionBase: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MessageExtensionBase"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.MessageExtensionBase) -> Bool {
    if messageExtensionBase != other.messageExtensionBase {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.messageType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messageType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.messageType) -> Bool {
    if messageType != other.messageType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Method: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Method"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Method) -> Bool {
    if method != other.method {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.methods: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "methods"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.methods) -> Bool {
    if methods != other.methods {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.minor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "minor"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.minor) -> Bool {
    if minor != other.minor {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Mixin: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Mixin"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Mixin) -> Bool {
    if mixin != other.mixin {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.mixins: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mixins"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.mixins) -> Bool {
    if mixins != other.mixins {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.mm: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mm"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.mm) -> Bool {
    if mm != other.mm {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.mod: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mod"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.mod) -> Bool {
    if mod != other.mod {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.month: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "month"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.month) -> Bool {
    if month != other.month {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.mutating: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mutating"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.mutating) -> Bool {
    if mutating != other.mutating {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.n: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "n"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.n) -> Bool {
    if n != other.n {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.name: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.name) -> Bool {
    if name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.NameDescription: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "NameDescription"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.NameDescription) -> Bool {
    if nameDescription != other.nameDescription {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.NameMap: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "NameMap"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.NameMap) -> Bool {
    if nameMap != other.nameMap {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.nameResolver: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nameResolver"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.nameResolver) -> Bool {
    if nameResolver != other.nameResolver {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.names: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "names"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.names) -> Bool {
    if names != other.names {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.nanos: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nanos"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.nanos) -> Bool {
    if nanos != other.nanos {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.nativeBytes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nativeBytes"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.nativeBytes) -> Bool {
    if nativeBytes != other.nativeBytes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.nativeEndianBytes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nativeEndianBytes"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.nativeEndianBytes) -> Bool {
    if nativeEndianBytes != other.nativeEndianBytes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.newL: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "newL"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.newL) -> Bool {
    if newL != other.newL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.newValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "newValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.newValue) -> Bool {
    if newValue != other.newValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.nextFieldNumber: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nextFieldNumber"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.nextFieldNumber) -> Bool {
    if nextFieldNumber != other.nextFieldNumber {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.nilMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nil"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.nilMessage) -> Bool {
    if nil_p != other.nil_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.nilLiteral: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nilLiteral"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.nilLiteral) -> Bool {
    if nilLiteral != other.nilLiteral {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.no: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "no"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.no) -> Bool {
    if no != other.no {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.normalizeForDuration: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "normalizeForDuration"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.normalizeForDuration) -> Bool {
    if normalizeForDuration != other.normalizeForDuration {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.normalizeForTimestamp: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "normalizeForTimestamp"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.normalizeForTimestamp) -> Bool {
    if normalizeForTimestamp != other.normalizeForTimestamp {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.nullValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nullValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.nullValue) -> Bool {
    if nullValue != other.nullValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.number: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.number) -> Bool {
    if number != other.number {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.numberValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "numberValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.numberValue) -> Bool {
    if numberValue != other.numberValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.of: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "of"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.of) -> Bool {
    if of != other.of {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.oneofIndex: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "oneofIndex"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.oneofIndex) -> Bool {
    if oneofIndex != other.oneofIndex {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.oneofs: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "oneofs"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.oneofs) -> Bool {
    if oneofs != other.oneofs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.OneOf_Kind: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "OneOf_Kind"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.OneOf_Kind) -> Bool {
    if oneOfKind != other.oneOfKind {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.only: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "only"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.only) -> Bool {
    if only != other.only {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Option: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Option"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Option) -> Bool {
    if option != other.option {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.OptionalEnumExtensionField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "OptionalEnumExtensionField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.OptionalEnumExtensionField) -> Bool {
    if optionalEnumExtensionField != other.optionalEnumExtensionField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.OptionalExtensionField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "OptionalExtensionField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.OptionalExtensionField) -> Bool {
    if optionalExtensionField != other.optionalExtensionField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.OptionalGroupExtensionField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "OptionalGroupExtensionField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.OptionalGroupExtensionField) -> Bool {
    if optionalGroupExtensionField != other.optionalGroupExtensionField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.OptionalMessageExtensionField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "OptionalMessageExtensionField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.OptionalMessageExtensionField) -> Bool {
    if optionalMessageExtensionField != other.optionalMessageExtensionField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.options: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "options"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.options) -> Bool {
    if options != other.options {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.other: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "other"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.other) -> Bool {
    if other_p != other.other_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.out: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "out"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.out) -> Bool {
    if out != other.out {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.output: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "output"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.output) -> Bool {
    if output != other.output {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.p: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "p"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.p) -> Bool {
    if p != other.p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.packed: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packed"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.packed) -> Bool {
    if packed != other.packed {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.PackedEnumExtensionField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PackedEnumExtensionField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.PackedEnumExtensionField) -> Bool {
    if packedEnumExtensionField != other.packedEnumExtensionField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.PackedExtensionField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PackedExtensionField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.PackedExtensionField) -> Bool {
    if packedExtensionField != other.packedExtensionField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.packedSize: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packedSize"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.packedSize) -> Bool {
    if packedSize != other.packedSize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.parseDuration: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parseDuration"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.parseDuration) -> Bool {
    if parseDuration != other.parseDuration {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.parseJSONFieldNames: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parseJSONFieldNames"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.parseJSONFieldNames) -> Bool {
    if parseJsonfieldNames != other.parseJsonfieldNames {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.parseTimestamp: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parseTimestamp"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.parseTimestamp) -> Bool {
    if parseTimestamp != other.parseTimestamp {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.partial: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partial"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.partial) -> Bool {
    if partial != other.partial {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.path: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.path) -> Bool {
    if path != other.path {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.paths: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "paths"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.paths) -> Bool {
    if paths != other.paths {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.pointer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pointer"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.pointer) -> Bool {
    if pointer != other.pointer {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.pos: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pos"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.pos) -> Bool {
    if pos != other.pos {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.prefix: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "prefix"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.prefix) -> Bool {
    if prefix != other.prefix {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.preTraverse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "preTraverse"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.preTraverse) -> Bool {
    if preTraverse != other.preTraverse {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.privateMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "private"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.privateMessage) -> Bool {
    if private_p != other.private_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.proto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "proto"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.proto) -> Bool {
    if proto != other.proto {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.proto2: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "proto2"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.proto2) -> Bool {
    if proto2 != other.proto2 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.proto3DefaultValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "proto3DefaultValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.proto3DefaultValue) -> Bool {
    if proto3DefaultValue != other.proto3DefaultValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufBool: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProtobufBool"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufBool) -> Bool {
    if protobufBool != other.protobufBool {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufBytes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProtobufBytes"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufBytes) -> Bool {
    if protobufBytes != other.protobufBytes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufDouble: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProtobufDouble"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufDouble) -> Bool {
    if protobufDouble != other.protobufDouble {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufEnumMap: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProtobufEnumMap"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufEnumMap) -> Bool {
    if protobufEnumMap != other.protobufEnumMap {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.protobufExtension: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "protobufExtension"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.protobufExtension) -> Bool {
    if protobufExtension != other.protobufExtension {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufFloat: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProtobufFloat"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufFloat) -> Bool {
    if protobufFloat != other.protobufFloat {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufInt32: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProtobufInt32"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufInt32) -> Bool {
    if protobufInt32 != other.protobufInt32 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufInt64: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProtobufInt64"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufInt64) -> Bool {
    if protobufInt64 != other.protobufInt64 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufMap: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProtobufMap"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufMap) -> Bool {
    if protobufMap != other.protobufMap {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufMessageMap: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProtobufMessageMap"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufMessageMap) -> Bool {
    if protobufMessageMap != other.protobufMessageMap {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProtobufString"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufString) -> Bool {
    if protobufString != other.protobufString {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufUInt32: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProtobufUInt32"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufUInt32) -> Bool {
    if protobufUint32 != other.protobufUint32 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufUInt64: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProtobufUInt64"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ProtobufUInt64) -> Bool {
    if protobufUint64 != other.protobufUint64 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_extensionFieldValues: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protobuf_extensionFieldValues"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_extensionFieldValues) -> Bool {
    if protobufExtensionFieldValues != other.protobufExtensionFieldValues {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_fieldNumber: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protobuf_fieldNumber"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_fieldNumber) -> Bool {
    if protobufFieldNumber != other.protobufFieldNumber {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_generated_isEqualTo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protobuf_generated_isEqualTo"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_generated_isEqualTo) -> Bool {
    if protobufGeneratedIsEqualTo != other.protobufGeneratedIsEqualTo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_nameMap: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protobuf_nameMap"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_nameMap) -> Bool {
    if protobufNameMap != other.protobufNameMap {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_newField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protobuf_newField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_newField) -> Bool {
    if protobufNewField != other.protobufNewField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_package: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protobuf_package"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_package) -> Bool {
    if protobufPackage != other.protobufPackage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_set: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protobuf_set"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.protobuf_set) -> Bool {
    if protobufSet != other.protobufSet {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.protoFieldName: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "protoFieldName"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.protoFieldName) -> Bool {
    if protoFieldName != other.protoFieldName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageNameMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "protoMessageName"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.protoMessageNameMessage) -> Bool {
    if protoMessageName != other.protoMessageName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.protoPaths: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "protoPaths"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.protoPaths) -> Bool {
    if protoPaths != other.protoPaths {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ProtoToJSON: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProtoToJSON"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ProtoToJSON) -> Bool {
    if protoToJson != other.protoToJson {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.publicMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "public"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.publicMessage) -> Bool {
    if public_p != other.public_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.putBoolValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "putBoolValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.putBoolValue) -> Bool {
    if putBoolValue != other.putBoolValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.putBytesValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "putBytesValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.putBytesValue) -> Bool {
    if putBytesValue != other.putBytesValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.putDoubleValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "putDoubleValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.putDoubleValue) -> Bool {
    if putDoubleValue != other.putDoubleValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.putEnumValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "putEnumValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.putEnumValue) -> Bool {
    if putEnumValue != other.putEnumValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.putFixedUInt32: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "putFixedUInt32"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.putFixedUInt32) -> Bool {
    if putFixedUint32 != other.putFixedUint32 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.putFixedUInt64: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "putFixedUInt64"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.putFixedUInt64) -> Bool {
    if putFixedUint64 != other.putFixedUint64 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.putFloatValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "putFloatValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.putFloatValue) -> Bool {
    if putFloatValue != other.putFloatValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.putInt64: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "putInt64"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.putInt64) -> Bool {
    if putInt64 != other.putInt64 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.putStringValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "putStringValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.putStringValue) -> Bool {
    if putStringValue != other.putStringValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.putUInt64: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "putUInt64"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.putUInt64) -> Bool {
    if putUint64 != other.putUint64 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.putUInt64Hex: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "putUInt64Hex"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.putUInt64Hex) -> Bool {
    if putUint64Hex != other.putUint64Hex {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.putVarInt: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "putVarInt"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.putVarInt) -> Bool {
    if putVarInt != other.putVarInt {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.putZigZagVarInt: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "putZigZagVarInt"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.putZigZagVarInt) -> Bool {
    if putZigZagVarInt != other.putZigZagVarInt {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.RawValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "RawValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.RawValue) -> Bool {
    if rawValue != other.rawValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.register: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "register"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.register) -> Bool {
    if register != other.register {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.RepeatedEnumExtensionField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "RepeatedEnumExtensionField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.RepeatedEnumExtensionField) -> Bool {
    if repeatedEnumExtensionField != other.repeatedEnumExtensionField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.RepeatedExtensionField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "RepeatedExtensionField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.RepeatedExtensionField) -> Bool {
    if repeatedExtensionField != other.repeatedExtensionField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.RepeatedGroupExtensionField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "RepeatedGroupExtensionField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.RepeatedGroupExtensionField) -> Bool {
    if repeatedGroupExtensionField != other.repeatedGroupExtensionField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.RepeatedMessageExtensionField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "RepeatedMessageExtensionField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.RepeatedMessageExtensionField) -> Bool {
    if repeatedMessageExtensionField != other.repeatedMessageExtensionField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.requestStreaming: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requestStreaming"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.requestStreaming) -> Bool {
    if requestStreaming != other.requestStreaming {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.requestTypeURL: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requestTypeURL"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.requestTypeURL) -> Bool {
    if requestTypeURL != other.requestTypeURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.requiredSize: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requiredSize"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.requiredSize) -> Bool {
    if requiredSize != other.requiredSize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.responseStreaming: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "responseStreaming"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.responseStreaming) -> Bool {
    if responseStreaming != other.responseStreaming {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.responseTypeURL: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "responseTypeURL"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.responseTypeURL) -> Bool {
    if responseTypeURL != other.responseTypeURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.result: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.result) -> Bool {
    if result != other.result {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.returnMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "return"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.returnMessage) -> Bool {
    if return_p != other.return_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.revision: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "revision"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.revision) -> Bool {
    if revision != other.revision {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.rhs: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rhs"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.rhs) -> Bool {
    if rhs != other.rhs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.root: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "root"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.root) -> Bool {
    if root != other.root {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.s: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "s"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.s) -> Bool {
    if s != other.s {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.savedPosition: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "savedPosition"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.savedPosition) -> Bool {
    if savedPosition != other.savedPosition {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.sawBackslash: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sawBackslash"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.sawBackslash) -> Bool {
    if sawBackslash != other.sawBackslash {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.scanner: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scanner"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.scanner) -> Bool {
    if scanner != other.scanner {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.seconds: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seconds"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.seconds) -> Bool {
    if seconds != other.seconds {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.selfMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "self"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.selfMessage) -> Bool {
    if self_p != other.self_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.separator: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "separator"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.separator) -> Bool {
    if separator != other.separator {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.serializeAnyJSON: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "serializeAnyJSON"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.serializeAnyJSON) -> Bool {
    if serializeAnyJson != other.serializeAnyJson {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.serializedData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "serializedData"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.serializedData) -> Bool {
    if serializedData != other.serializedData {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.serializedSize: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "serializedSize"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.serializedSize) -> Bool {
    if serializedSize != other.serializedSize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.serialQueue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "serialQueue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.serialQueue) -> Bool {
    if serialQueue != other.serialQueue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.set: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "set"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.set) -> Bool {
    if set != other.set {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.setExtensionValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "setExtensionValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.setExtensionValue) -> Bool {
    if setExtensionValue != other.setExtensionValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.shift: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shift"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.shift) -> Bool {
    if shift != other.shift {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.SignedInteger: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "SignedInteger"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.SignedInteger) -> Bool {
    if signedInteger != other.signedInteger {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.SimpleExtensionMap: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "SimpleExtensionMap"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.SimpleExtensionMap) -> Bool {
    if simpleExtensionMap != other.simpleExtensionMap {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.sizer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sizer"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.sizer) -> Bool {
    if sizer != other.sizer {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.slowUtf8ToString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "slowUtf8ToString"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.slowUtf8ToString) -> Bool {
    if slowUtf8ToString != other.slowUtf8ToString {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.sourceContext: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sourceContext"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.sourceContext) -> Bool {
    if sourceContext != other.sourceContext {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.split: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "split"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.split) -> Bool {
    if split != other.split {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ss: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ss"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ss) -> Bool {
    if ss != other.ss {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.start: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.start) -> Bool {
    if start != other.start {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.startArray: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "startArray"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.startArray) -> Bool {
    if startArray != other.startArray {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.startField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "startField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.startField) -> Bool {
    if startField != other.startField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.startIndex: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "startIndex"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.startIndex) -> Bool {
    if startIndex != other.startIndex {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.startMessageField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "startMessageField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.startMessageField) -> Bool {
    if startMessageField != other.startMessageField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.startObject: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "startObject"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.startObject) -> Bool {
    if startObject != other.startObject {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.startRegularField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "startRegularField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.startRegularField) -> Bool {
    if startRegularField != other.startRegularField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.state: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.state) -> Bool {
    if state != other.state {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.staticMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "static"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.staticMessage) -> Bool {
    if static_p != other.static_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.StaticString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "StaticString"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.StaticString) -> Bool {
    if staticString != other.staticString {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.storage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "storage"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.storage) -> Bool {
    if storage != other.storage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.StorageClass: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "StorageClass"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.StorageClass) -> Bool {
    if storageClass != other.storageClass {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.StringMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "String"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.StringMessage) -> Bool {
    if string != other.string {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.stringLiteral: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stringLiteral"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.stringLiteral) -> Bool {
    if stringLiteral != other.stringLiteral {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.StringLiteralType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "StringLiteralType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.StringLiteralType) -> Bool {
    if stringLiteralType != other.stringLiteralType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.stringResult: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stringResult"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.stringResult) -> Bool {
    if stringResult != other.stringResult {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.stringValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stringValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.stringValue) -> Bool {
    if stringValue != other.stringValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Struct: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Struct"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Struct) -> Bool {
    if struct_p != other.struct_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.structValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "structValue"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.structValue) -> Bool {
    if structValue != other.structValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.subDecoder: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subDecoder"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.subDecoder) -> Bool {
    if subDecoder != other.subDecoder {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.subscriptMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscript"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.subscriptMessage) -> Bool {
    if subscript_p != other.subscript_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.swift: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "swift"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.swift) -> Bool {
    if swift != other.swift {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.SwiftProtobufMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "SwiftProtobuf"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.SwiftProtobufMessage) -> Bool {
    if swiftProtobuf != other.swiftProtobuf {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.syntax: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "syntax"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.syntax) -> Bool {
    if syntax != other.syntax {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.T: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "T"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.T) -> Bool {
    if t != other.t {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.tag: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.tag) -> Bool {
    if tag != other.tag {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.target: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.target) -> Bool {
    if target != other.target {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.terminator: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "terminator"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.terminator) -> Bool {
    if terminator != other.terminator {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.testDecoder: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "testDecoder"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.testDecoder) -> Bool {
    if testDecoder != other.testDecoder {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.text: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.text) -> Bool {
    if text != other.text {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.textDecoder: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "textDecoder"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.textDecoder) -> Bool {
    if textDecoder != other.textDecoder {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.TextFormatDecoder: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TextFormatDecoder"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.TextFormatDecoder) -> Bool {
    if textFormatDecoder != other.textFormatDecoder {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.TextFormatEncoder: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TextFormatEncoder"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.TextFormatEncoder) -> Bool {
    if textFormatEncoder != other.textFormatEncoder {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.TextFormatEncodingVisitor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TextFormatEncodingVisitor"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.TextFormatEncodingVisitor) -> Bool {
    if textFormatEncodingVisitor != other.textFormatEncodingVisitor {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.TextFormatScanner: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TextFormatScanner"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.TextFormatScanner) -> Bool {
    if textFormatScanner != other.textFormatScanner {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.textFormatString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "textFormatString"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.textFormatString) -> Bool {
    if textFormatString != other.textFormatString {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.that: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "that"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.that) -> Bool {
    if that != other.that {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.they: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "they"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.they) -> Bool {
    if they != other.they {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.throwsMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "throws"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.throwsMessage) -> Bool {
    if throws_p != other.throws_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.timeInterval: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timeInterval"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.timeInterval) -> Bool {
    if timeInterval != other.timeInterval {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.timeIntervalSince1970: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timeIntervalSince1970"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.timeIntervalSince1970) -> Bool {
    if timeIntervalSince1970 != other.timeIntervalSince1970 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.timeIntervalSinceReferenceDate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timeIntervalSinceReferenceDate"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.timeIntervalSinceReferenceDate) -> Bool {
    if timeIntervalSinceReferenceDate != other.timeIntervalSinceReferenceDate {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.timeOfDayFromSecondsSince1970: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timeOfDayFromSecondsSince1970"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.timeOfDayFromSecondsSince1970) -> Bool {
    if timeOfDayFromSecondsSince1970 != other.timeOfDayFromSecondsSince1970 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.Timestamp: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Timestamp"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.Timestamp) -> Bool {
    if timestamp != other.timestamp {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.toJsonFieldName: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "toJsonFieldName"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.toJsonFieldName) -> Bool {
    if toJsonFieldName != other.toJsonFieldName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.total: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.total) -> Bool {
    if total != other.total {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.traverseMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "traverse"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.traverseMessage) -> Bool {
    if traverse != other.traverse {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.trueMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "true"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.trueMessage) -> Bool {
    if true_p != other.true_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.tryMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "try"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.tryMessage) -> Bool {
    if try_p != other.try_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.TypeMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Type"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.TypeMessage) -> Bool {
    if type != other.type {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.typealiasMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typealias"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.typealiasMessage) -> Bool {
    if typealias_p != other.typealias_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.typeName: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typeName"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.typeName) -> Bool {
    if typeName != other.typeName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.typePrefix: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typePrefix"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.typePrefix) -> Bool {
    if typePrefix != other.typePrefix {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.typeRegistry: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typeRegistry"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.typeRegistry) -> Bool {
    if typeRegistry != other.typeRegistry {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.typeStart: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typeStart"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.typeStart) -> Bool {
    if typeStart != other.typeStart {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.typeUnknown: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typeUnknown"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.typeUnknown) -> Bool {
    if typeUnknown != other.typeUnknown {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.typeURL: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typeURL"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.typeURL) -> Bool {
    if typeURL != other.typeURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UInt32Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UInt32"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UInt32Message) -> Bool {
    if uint32 != other.uint32 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UInt32Value: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UInt32Value"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UInt32Value) -> Bool {
    if uint32Value != other.uint32Value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UInt64Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UInt64"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UInt64Message) -> Bool {
    if uint64 != other.uint64 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UInt64Value: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UInt64Value"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UInt64Value) -> Bool {
    if uint64Value != other.uint64Value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UInt8: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UInt8"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UInt8) -> Bool {
    if uint8 != other.uint8 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UnicodeScalar: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UnicodeScalar"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UnicodeScalar) -> Bool {
    if unicodeScalar != other.unicodeScalar {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.unicodeScalarLiteral: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unicodeScalarLiteral"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.unicodeScalarLiteral) -> Bool {
    if unicodeScalarLiteral != other.unicodeScalarLiteral {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UnicodeScalarLiteralType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UnicodeScalarLiteralType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UnicodeScalarLiteralType) -> Bool {
    if unicodeScalarLiteralType != other.unicodeScalarLiteralType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.unicodeScalars: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unicodeScalars"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.unicodeScalars) -> Bool {
    if unicodeScalars != other.unicodeScalars {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UnicodeScalarView: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UnicodeScalarView"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UnicodeScalarView) -> Bool {
    if unicodeScalarView != other.unicodeScalarView {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.union: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "union"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.union) -> Bool {
    if union != other.union {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.uniqueStorage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uniqueStorage"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.uniqueStorage) -> Bool {
    if uniqueStorage != other.uniqueStorage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.unknown: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unknown"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.unknown) -> Bool {
    if unknown != other.unknown {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.unknownData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unknownData"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.unknownData) -> Bool {
    if unknownData != other.unknownData {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.unknownFieldsMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unknownFields"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.unknownFieldsMessage) -> Bool {
    if unknownFields_p != other.unknownFields_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UnknownStorage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UnknownStorage"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UnknownStorage) -> Bool {
    if unknownStorage != other.unknownStorage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.unpack: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unpack"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.unpack) -> Bool {
    if unpack != other.unpack {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.unpackTo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unpackTo"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.unpackTo) -> Bool {
    if unpackTo != other.unpackTo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UnsafeBufferPointer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UnsafeBufferPointer"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UnsafeBufferPointer) -> Bool {
    if unsafeBufferPointer != other.unsafeBufferPointer {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UnsafeMutablePointer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UnsafeMutablePointer"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UnsafeMutablePointer) -> Bool {
    if unsafeMutablePointer != other.unsafeMutablePointer {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UnsafeMutableRawBufferPointer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UnsafeMutableRawBufferPointer"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UnsafeMutableRawBufferPointer) -> Bool {
    if unsafeMutableRawBufferPointer != other.unsafeMutableRawBufferPointer {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UnsafePointer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UnsafePointer"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UnsafePointer) -> Bool {
    if unsafePointer != other.unsafePointer {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.url: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.url) -> Bool {
    if url != other.url {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.used: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "used"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.used) -> Bool {
    if used != other.used {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.utf8: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "utf8"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.utf8) -> Bool {
    if utf8 != other.utf8 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.utf8Buffer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "utf8Buffer"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.utf8Buffer) -> Bool {
    if utf8Buffer != other.utf8Buffer {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.utf8Codec: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "utf8Codec"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.utf8Codec) -> Bool {
    if utf8Codec != other.utf8Codec {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.utf8Pointer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "utf8Pointer"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.utf8Pointer) -> Bool {
    if utf8Pointer != other.utf8Pointer {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.utf8ToDouble: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "utf8ToDouble"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.utf8ToDouble) -> Bool {
    if utf8ToDouble != other.utf8ToDouble {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.utf8ToString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "utf8ToString"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.utf8ToString) -> Bool {
    if utf8ToString != other.utf8ToString {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.UTF8View: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UTF8View"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.UTF8View) -> Bool {
    if utf8View != other.utf8View {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.v: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "v"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.v) -> Bool {
    if v != other.v {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.value: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.value) -> Bool {
    if value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.valueField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "valueField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.valueField) -> Bool {
    if valueField != other.valueField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.values: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.values) -> Bool {
    if values != other.values {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.ValueType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ValueType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.ValueType) -> Bool {
    if valueType != other.valueType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.varMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "var"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.varMessage) -> Bool {
    if var_p != other.var_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.version: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.version) -> Bool {
    if version != other.version {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.versionString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "versionString"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.versionString) -> Bool {
    if versionString != other.versionString {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitExtensionFields: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitExtensionFields"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitExtensionFields) -> Bool {
    if visitExtensionFields != other.visitExtensionFields {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitMapField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitMapField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitMapField) -> Bool {
    if visitMapField != other.visitMapField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitor"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitor) -> Bool {
    if visitor_p != other.visitor_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPacked: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPacked"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPacked) -> Bool {
    if visitPacked != other.visitPacked {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedBoolField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedBoolField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedBoolField) -> Bool {
    if visitPackedBoolField != other.visitPackedBoolField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedDoubleField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedDoubleField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedDoubleField) -> Bool {
    if visitPackedDoubleField != other.visitPackedDoubleField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedEnumField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedEnumField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedEnumField) -> Bool {
    if visitPackedEnumField != other.visitPackedEnumField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedFixed32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedFixed32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedFixed32Field) -> Bool {
    if visitPackedFixed32Field != other.visitPackedFixed32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedFixed64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedFixed64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedFixed64Field) -> Bool {
    if visitPackedFixed64Field != other.visitPackedFixed64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedFloatField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedFloatField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedFloatField) -> Bool {
    if visitPackedFloatField != other.visitPackedFloatField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedInt32Field) -> Bool {
    if visitPackedInt32Field != other.visitPackedInt32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedInt64Field) -> Bool {
    if visitPackedInt64Field != other.visitPackedInt64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedSFixed32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedSFixed32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedSFixed32Field) -> Bool {
    if visitPackedSfixed32Field != other.visitPackedSfixed32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedSFixed64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedSFixed64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedSFixed64Field) -> Bool {
    if visitPackedSfixed64Field != other.visitPackedSfixed64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedSInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedSInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedSInt32Field) -> Bool {
    if visitPackedSint32Field != other.visitPackedSint32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedSInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedSInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedSInt64Field) -> Bool {
    if visitPackedSint64Field != other.visitPackedSint64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedUInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedUInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedUInt32Field) -> Bool {
    if visitPackedUint32Field != other.visitPackedUint32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedUInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitPackedUInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitPackedUInt64Field) -> Bool {
    if visitPackedUint64Field != other.visitPackedUint64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeated: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeated"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeated) -> Bool {
    if visitRepeated != other.visitRepeated {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedBoolField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedBoolField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedBoolField) -> Bool {
    if visitRepeatedBoolField != other.visitRepeatedBoolField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedBytesField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedBytesField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedBytesField) -> Bool {
    if visitRepeatedBytesField != other.visitRepeatedBytesField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedDoubleField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedDoubleField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedDoubleField) -> Bool {
    if visitRepeatedDoubleField != other.visitRepeatedDoubleField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedEnumField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedEnumField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedEnumField) -> Bool {
    if visitRepeatedEnumField != other.visitRepeatedEnumField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedFixed32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedFixed32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedFixed32Field) -> Bool {
    if visitRepeatedFixed32Field != other.visitRepeatedFixed32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedFixed64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedFixed64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedFixed64Field) -> Bool {
    if visitRepeatedFixed64Field != other.visitRepeatedFixed64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedFloatField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedFloatField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedFloatField) -> Bool {
    if visitRepeatedFloatField != other.visitRepeatedFloatField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedGroupField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedGroupField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedGroupField) -> Bool {
    if visitRepeatedGroupField != other.visitRepeatedGroupField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedInt32Field) -> Bool {
    if visitRepeatedInt32Field != other.visitRepeatedInt32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedInt64Field) -> Bool {
    if visitRepeatedInt64Field != other.visitRepeatedInt64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedMessageField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedMessageField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedMessageField) -> Bool {
    if visitRepeatedMessageField != other.visitRepeatedMessageField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedSFixed32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedSFixed32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedSFixed32Field) -> Bool {
    if visitRepeatedSfixed32Field != other.visitRepeatedSfixed32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedSFixed64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedSFixed64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedSFixed64Field) -> Bool {
    if visitRepeatedSfixed64Field != other.visitRepeatedSfixed64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedSInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedSInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedSInt32Field) -> Bool {
    if visitRepeatedSint32Field != other.visitRepeatedSint32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedSInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedSInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedSInt64Field) -> Bool {
    if visitRepeatedSint64Field != other.visitRepeatedSint64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedStringField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedStringField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedStringField) -> Bool {
    if visitRepeatedStringField != other.visitRepeatedStringField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedUInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedUInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedUInt32Field) -> Bool {
    if visitRepeatedUint32Field != other.visitRepeatedUint32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedUInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitRepeatedUInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitRepeatedUInt64Field) -> Bool {
    if visitRepeatedUint64Field != other.visitRepeatedUint64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingular: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingular"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingular) -> Bool {
    if visitSingular != other.visitSingular {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularBoolField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularBoolField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularBoolField) -> Bool {
    if visitSingularBoolField != other.visitSingularBoolField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularBytesField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularBytesField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularBytesField) -> Bool {
    if visitSingularBytesField != other.visitSingularBytesField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularDoubleField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularDoubleField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularDoubleField) -> Bool {
    if visitSingularDoubleField != other.visitSingularDoubleField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularEnumField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularEnumField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularEnumField) -> Bool {
    if visitSingularEnumField != other.visitSingularEnumField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularFixed32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularFixed32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularFixed32Field) -> Bool {
    if visitSingularFixed32Field != other.visitSingularFixed32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularFixed64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularFixed64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularFixed64Field) -> Bool {
    if visitSingularFixed64Field != other.visitSingularFixed64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularFloatField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularFloatField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularFloatField) -> Bool {
    if visitSingularFloatField != other.visitSingularFloatField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularGroupField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularGroupField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularGroupField) -> Bool {
    if visitSingularGroupField != other.visitSingularGroupField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularInt32Field) -> Bool {
    if visitSingularInt32Field != other.visitSingularInt32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularInt64Field) -> Bool {
    if visitSingularInt64Field != other.visitSingularInt64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularMessageField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularMessageField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularMessageField) -> Bool {
    if visitSingularMessageField != other.visitSingularMessageField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularSFixed32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularSFixed32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularSFixed32Field) -> Bool {
    if visitSingularSfixed32Field != other.visitSingularSfixed32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularSFixed64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularSFixed64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularSFixed64Field) -> Bool {
    if visitSingularSfixed64Field != other.visitSingularSfixed64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularSInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularSInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularSInt32Field) -> Bool {
    if visitSingularSint32Field != other.visitSingularSint32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularSInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularSInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularSInt64Field) -> Bool {
    if visitSingularSint64Field != other.visitSingularSint64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularStringField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularStringField"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularStringField) -> Bool {
    if visitSingularStringField != other.visitSingularStringField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularUInt32Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularUInt32Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularUInt32Field) -> Bool {
    if visitSingularUint32Field != other.visitSingularUint32Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularUInt64Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitSingularUInt64Field"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitSingularUInt64Field) -> Bool {
    if visitSingularUint64Field != other.visitSingularUint64Field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.visitUnknown: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitUnknown"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.visitUnknown) -> Bool {
    if visitUnknown != other.visitUnknown {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.whereMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "where"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.whereMessage) -> Bool {
    if where_p != other.where_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.wireFormat: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "wireFormat"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.wireFormat) -> Bool {
    if wireFormat != other.wireFormat {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.with: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "with"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.with) -> Bool {
    if with != other.with {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.WrappedType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "WrappedType"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.WrappedType) -> Bool {
    if wrappedType != other.wrappedType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.wrapped_vsnprintf: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wrapped_vsnprintf"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.wrapped_vsnprintf) -> Bool {
    if wrappedVsnprintf != other.wrappedVsnprintf {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.yday: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "yday"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.yday) -> Bool {
    if yday != other.yday {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_GeneratedSwiftReservedMessages.YY: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "YY"),
  ]

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_GeneratedSwiftReservedMessages.YY) -> Bool {
    if yy != other.yy {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        swift: ["5.2", "5.1.5"]
        protobuf_gitref: ["v3.11.4"]
    container:
      image: swift:${{ matrix.swift }}-bionic
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: main
    - name: Build
      working-directory: main
      run: make build
    - name: Test runtime
      working-directory: main
      run: make test-runtime
    - name: Checkout protobuf repo
      uses: actions/checkout@v2
      with:
        repository: protocolbuffers/protobuf
        ref: ${{ matrix.protobuf_gitref }}
        path: protobuf
    - name: Get protobuf head ref
      id: protobuf-head
      working-directory: protobuf
      # get exact commit hash for refs that can float like 'master'
      run: echo "::set-output name=ref::$(git rev-parse --verify HEAD)"
    - name: Cache protobuf
      id: cache-protobuf
      uses: actions/cache@v1
      with:
        path: protobuf
        key: ${{ runner.os }}-protobuf-${{ matrix.protobuf_gitref }}-${{ steps.protobuf-head.outputs.ref }}
    - name: Update and install dependencies
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      # dependencies from https://github.com/protocolbuffers/protobuf/blob/master/src/README.md
      run: apt-get update && apt-get install -y autoconf automake libtool curl make g++ unzip
    - name: Checkout protobuf repo
      uses: actions/checkout@v2
      with:
        repository: protocolbuffers/protobuf
        ref: ${{ matrix.protobuf_gitref }}
        path: protobuf
    - name: Build protobuf
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      working-directory: protobuf
      run: |
        ./autogen.sh
        ./configure
        make -C ./src
        make -C ./conformance
    - name: Test plugin
      working-directory: main
      run: make test-plugin PROTOC=../protobuf/src/protoc
    - name: Test conformance
      working-directory: main
      run: make test-conformance
